{
  "version": 3,
  "sources": ["../../../../node_modules/css-doodle/src/parser/tokenizer.js", "../../../../node_modules/css-doodle/src/parser/parse-var.js", "../../../../node_modules/css-doodle/src/utils/index.js", "../../../../node_modules/css-doodle/src/parser/parse-value-group.js", "../../../../node_modules/css-doodle/src/parser/parse-svg.js", "../../../../node_modules/css-doodle/src/generator/svg-extended.js", "../../../../node_modules/css-doodle/src/utils/list.js", "../../../../node_modules/css-doodle/src/parser/parse-css.js", "../../../../node_modules/css-doodle/src/parser/parse-grid.js", "../../../../node_modules/css-doodle/src/parser/parse-shaders.js", "../../../../node_modules/css-doodle/src/utils/svg.js", "../../../../node_modules/css-doodle/src/generator/svg.js", "../../../../node_modules/css-doodle/src/parser/parse-compound-value.js", "../../../../node_modules/css-doodle/src/utils/transform.js", "../../../../node_modules/css-doodle/src/calc.js", "../../../../node_modules/css-doodle/src/utils/cache.js", "../../../../node_modules/css-doodle/src/utils/memo.js", "../../../../node_modules/css-doodle/src/utils/expand.js", "../../../../node_modules/css-doodle/src/utils/stack.js", "../../../../node_modules/css-doodle/src/utils/noise.js", "../../../../node_modules/css-doodle/src/utils/get-named-arguments.js", "../../../../node_modules/css-doodle/src/parser/parse-shape-commands.js", "../../../../node_modules/css-doodle/src/parser/parse-direction.js", "../../../../node_modules/css-doodle/src/generator/shapes.js", "../../../../node_modules/css-doodle/src/parser/parse-svg-path.js", "../../../../node_modules/css-doodle/src/uniforms.js", "../../../../node_modules/css-doodle/src/function.js", "../../../../node_modules/css-doodle/src/preset-size.js", "../../../../node_modules/css-doodle/src/utils/get-props.js", "../../../../node_modules/css-doodle/src/utils/prefixer.js", "../../../../node_modules/css-doodle/src/property.js", "../../../../node_modules/css-doodle/src/selector.js", "../../../../node_modules/css-doodle/src/lib/seedrandom.js", "../../../../node_modules/css-doodle/src/generator/css.js", "../../../../node_modules/css-doodle/src/generator/shader.js", "../../../../node_modules/css-doodle/src/parser/parse-pattern.js", "../../../../node_modules/css-doodle/src/generator/pattern.js", "../../../../node_modules/css-doodle/src/generator/canvas.js", "../../../../node_modules/css-doodle/src/generator/svg-to-png.js", "../../../../node_modules/css-doodle/src/utils/variables.js", "../../../../node_modules/css-doodle/src/utils/get-rgba-color.js", "../../../../node_modules/css-doodle/src/utils/create-animation-frame.js", "../../../../node_modules/css-doodle/src/index.js"],
  "sourcesContent": ["/**\n * This is totally rewrite for the old parser module\n * I'll improve and replace them little by little.\n */\n\nconst symbols = [\n  ':', ';', ',', '(', ')', '[', ']',\n  '{', '}', 'π', '±', '+', '-', '*',\n  '/', '%', '\"', \"'\", '`', '@', '=',\n];\n\nconst is = {\n  escape: c => c == '\\\\',\n  space:  c => /[\\r\\n\\t\\s]/.test(c),\n  digit:  c => /^[0-9]$/.test(c),\n  sign:   c => /^[+-]$/.test(c),\n  dot:    c => c == '.',\n  quote:  c => /^[\"'`]$/.test(c),\n  symbol: c => symbols.includes(c),\n  hexNum: c => /^[0-9a-f]$/i.test(c),\n  hex:           (a, b, c) => a == '0' && is.letter(b, 'x') && is.hexNum(c),\n  expWithSign:   (a, b, c) => is.letter(a, 'e') && is.sign(b) && is.digit(c),\n  exp:           (a, b) => is.letter(a, 'e') && is.digit(b),\n  dots:          (a, b) => is.dot(a) && is.dot(b),\n  letter:        (a, b) => String(a).toLowerCase() == String(b).toLowerCase(),\n  comment:       (a, b) => a == '/' && b == '*',\n  inlineComment: (a, b) => a == '/' && b === '/',\n  selfClosedTag: (a, b) => a == '/' && b == '>',\n  closedTag:     (a, b) => a == '<' && b == '/',\n}\n\nclass Token {\n  constructor({ type, value, pos, status }) {\n    this.type = type;\n    this.value = value;\n    this.pos = pos;\n    if (status) {\n      this.status = status;\n    }\n  }\n  isSymbol(...values) {\n    let isSymbol = this.type == 'Symbol';\n    if (!values.length) return isSymbol;\n    return values.some(c => c === this.value);\n  }\n  isSpace() {\n    return this.type == 'Space';\n  }\n  isNumber() {\n    return this.type == 'Number';\n  }\n  isWord() {\n    return this.type == 'Word';\n  }\n}\n\nfunction iterator(input) {\n  let pointer = -1;\n  let max = input.length;\n  let col = -1, row = 0;\n  return {\n    curr(n = 0) {\n      return input[pointer + n];\n    },\n    next(n = 1) {\n      let next = input[pointer += n];\n      if (next === '\\n') row++, col = 0;\n      else col += n;\n      return next;\n    },\n    end() {\n      return pointer >= max;\n    },\n    get() {\n      return {\n        prev:  input[pointer - 1],\n        curr:  input[pointer + 0],\n        next:  input[pointer + 1],\n        next2: input[pointer + 2],\n        next3: input[pointer + 3],\n        pos:   [col, row],\n      }\n    }\n  }\n}\n\nfunction skipComments(iter) {\n  while (iter.next()) {\n    let { curr, prev } = iter.get();\n    if (is.comment(curr, prev)) break;\n  }\n}\n\nfunction skipInlineComments(iter) {\n  while (iter.next()) {\n    if (iter.curr() === '\\n') break;\n  }\n}\n\nfunction ignoreSpacingSymbol(value) {\n   return [':', ';', ',', '{', '}', '(', ')', '[', ']'].includes(value);\n}\n\nfunction readWord(iter) {\n  let temp = '';\n  while (!iter.end()) {\n    let { curr, next } = iter.get();\n    temp += curr;\n    let isBreak = is.symbol(next) || is.space(next) || is.digit(next);\n    if (temp.length && isBreak) {\n      if (!is.closedTag(curr, next)) break;\n    }\n    iter.next();\n  }\n  return temp.trim();\n}\n\nfunction readSpaces(iter) {\n  let temp = '';\n  while (!iter.end()) {\n    let { curr, next } = iter.get();\n    temp += curr;\n    if (!is.space(next)) break;\n    iter.next();\n  }\n  return temp;\n}\n\nfunction readNumber(iter) {\n  let temp = '';\n  let hasDot = false;\n  while (!iter.end()) {\n    let { curr, next, next2, next3 } = iter.get();\n    temp += curr;\n    if (hasDot && is.dot(next)) break;\n    if (is.dot(curr)) hasDot = true;\n    if (is.dots(next, next2)) break;\n    if (is.expWithSign(next, next2, next3)) {\n      temp += iter.next() + iter.next();\n    }\n    else if (is.exp(next, next2)) {\n      temp += iter.next();\n    }\n    else if (!is.digit(next) && !is.dot(next)) {\n      break;\n    }\n    iter.next();\n  }\n  return temp;\n}\n\nfunction readHexNumber(iter) {\n  let temp = '0x';\n  iter.next(2);\n  while (!iter.end()) {\n    let { curr, next } = iter.get();\n    temp += curr;\n    if (!is.hexNum(next)) break;\n    iter.next();\n  }\n  return temp;\n}\n\nfunction last(array) {\n  return array[array.length - 1];\n}\n\nfunction scan(source, options = {}) {\n  let iter = iterator(String(source).trim());\n  let tokens = [];\n  let quoteStack = [];\n\n  while (iter.next()) {\n    let { prev, curr, next, next2, pos } = iter.get();\n    if (is.comment(curr, next)) {\n      skipComments(iter);\n    }\n    else if (options.ignoreInlineComment && is.inlineComment(curr, next)) {\n      skipInlineComments(iter);\n    }\n    else if (is.hex(curr, next, next2)) {\n      let num = readHexNumber(iter);\n      tokens.push(new Token({\n        type: 'Number', value: num, pos\n      }));\n    }\n    else if (is.digit(curr) || (\n        is.digit(next) && is.dot(curr) && !is.dots(prev, curr))) {\n      let num = readNumber(iter);\n      tokens.push(new Token({\n        type: 'Number', value: num, pos\n      }));\n    }\n    else if (is.symbol(curr) && !is.selfClosedTag(curr, next)) {\n      let lastToken = last(tokens);\n      // negative\n      let isNextDigit = is.digit(next) || (is.dot(next) && is.digit(next2));\n      if (curr === '-' && isNextDigit && (!lastToken || !lastToken.isNumber())) {\n        let num = readNumber(iter);\n        tokens.push(new Token({\n          type: 'Number', value: num, pos\n        }));\n        continue;\n      }\n\n      let token = {\n        type: 'Symbol', value: curr, pos\n      }\n      // Escaped symbols\n      if (quoteStack.length && is.escape(lastToken.value)) {\n        tokens.pop();\n        let word = readWord(iter);\n        if (word.length) {\n          tokens.push(new Token({\n            type: 'Word', value: word, pos\n          }));\n        }\n      }\n      else {\n        if (is.quote(curr)) {\n          let lastQuote = last(quoteStack);\n          if (lastQuote == curr) {\n            quoteStack.pop();\n            token.status = 'close';\n          } else {\n            quoteStack.push(curr);\n            token.status = 'open';\n          }\n        }\n\n        tokens.push(new Token(token));\n      }\n    }\n    else if (is.space(curr)) {\n      let spaces = readSpaces(iter);\n      let lastToken = last(tokens);\n      let { next } = iter.get();\n      // Reduce unnecessary spaces\n      if (!quoteStack.length && lastToken) {\n        let prev = lastToken.value;\n        let ignoreLeft = (ignoreSpacingSymbol(prev) && prev !== ')');\n        let ignoreRight = (ignoreSpacingSymbol(next) && next !== '(');\n        if (ignoreLeft || ignoreRight)  {\n          continue;\n        } else {\n          spaces = options.preserveLineBreak ? curr : ' ';\n        }\n      }\n      if (tokens.length && (next && next.trim())) {\n        tokens.push(new Token({\n          type: 'Space', value: spaces, pos\n        }));\n      }\n    }\n    else {\n      let word = readWord(iter);\n      if (word.length) {\n        tokens.push(new Token({\n          type: 'Word', value: word, pos\n        }));\n      }\n    }\n  }\n\n  // Remove last space token\n  let lastToken = last(tokens);\n  if (lastToken && lastToken.isSpace()) {\n    tokens.length = tokens.length - 1;\n  }\n  return tokens;\n}\n\nexport {\n  symbols,\n  is,\n  iterator,\n  scan,\n  Token\n}\n", "import { scan, iterator } from './tokenizer.js';\n\nfunction parse(input) {\n  let iter = iterator(scan(input));\n  return walk(iter);\n}\n\nfunction walk(iter) {\n  let rules = [];\n  while (iter.next()) {\n    let { curr, next } = iter.get();\n    if (curr.value === 'var') {\n      if (next && next.isSymbol('(')) {\n        iter.next();\n        let rule = parseVar(iter);\n        if (isValid(rule.name)) {\n          rules.push(rule);\n        }\n      }\n    } else if (rules.length && !curr.isSymbol(',')) {\n      break;\n    }\n  }\n  return rules;\n}\n\nfunction parseVar(iter) {\n  let ret = {};\n  let tokens = [];\n  while (iter.next()) {\n    let { curr, next } = iter.get();\n    if (curr.isSymbol(')', ';') && !ret.name) {\n      ret.name = joinTokens(tokens);\n      break;\n    }\n    else if (curr.isSymbol(',')) {\n      if (ret.name === undefined) {\n        ret.name = joinTokens(tokens);\n        tokens = [];\n      }\n      if (ret.name) {\n        ret.fallback = walk(iter);\n      }\n    } else {\n      tokens.push(curr);\n    }\n  }\n  return ret;\n}\n\nfunction joinTokens(tokens) {\n  return tokens.map(n => n.value).join('');\n}\n\nfunction isValid(name) {\n  if (name === undefined) return false;\n  if (name.length <= 2) return false;\n  if (name.substr(2).startsWith('-')) return false;\n  if (!name.startsWith('--')) return false;\n  return true;\n}\n\nexport default parse;\n", "function clamp(num, min, max) {\n  num = Number(num) || 0;\n  return Math.max(min, Math.min(max, num));\n}\n\nfunction maybe(cond, value) {\n  if (!cond) return '';\n  return (typeof value === 'function') ? value() : value;\n}\n\nfunction range(start, stop, step) {\n  let count = 0, old = start;\n  let initial = n => (n > 0 && n < 1) ? .1 : 1;\n  let length = arguments.length;\n  if (length == 1) [start, stop] = [initial(start), start];\n  if (length < 3) step = initial(start);\n  let range = [];\n  while ((step >= 0 && start <= stop)\n    || (step < 0 && start > stop)) {\n    range.push(start);\n    start += step;\n    if (count++ >= 65535) break;\n  }\n  if (!range.length) range.push(old);\n  return range;\n}\n\nfunction add_alias(obj, names) {\n  for (let [alias, name] of Object.entries(names)) {\n    obj[alias] = obj[name];\n  }\n  return obj;\n}\n\nfunction is_letter(c) {\n  return /^[a-zA-Z]$/.test(c);\n}\n\nfunction is_nil(s) {\n  return s === undefined || s === null;\n}\n\nfunction is_invalid_number(v) {\n  return is_nil(v) || Number.isNaN(v);\n}\n\nfunction is_empty(value) {\n  return is_nil(value) || value === '';\n}\n\nfunction lazy(fn) {\n  let wrap = (upstream) => {\n    return (...args) => fn(...[upstream, ...args]);\n  }\n  wrap.lazy = true;\n  return wrap;\n}\n\nfunction sequence(count, fn) {\n  let [x, y = 1] = String(count).split(/[x-]/);\n  x = clamp(Math.ceil(x) || 1, 1, 65536);\n  y = clamp(Math.ceil(y) || 1, 1, 65536);\n  let max = x * y;\n  let ret = [];\n  let index = 1;\n\n  if (/x/.test(count)) {\n    for (let i = 1; i <= y; ++i) {\n      for (let j = 1; j <= x; ++j) {\n        ret.push(fn(index++, j, i, max, x, y, index));\n      }\n    }\n  }\n\n  else if (/-/.test(count)) {\n    max = Math.abs(x - y) + 1;\n    if (x <= y) {\n      for (let i = x; i <= y; ++i) {\n        ret.push(fn(i, i, 1, max, max, 1, index++));\n      }\n    } else {\n      for (let i = x; i >= y; --i) {\n        ret.push(fn(i, i, 1, max, max, 1, index++));\n      }\n    }\n  }\n\n  else {\n    for (let i = 1; i <= x; ++i) {\n      ret.push(fn(i, i, 1, x, x, 1, index++));\n    }\n  }\n\n  return ret;\n}\n\nfunction cell_id(x, y, z) {\n  return 'c-' + x + '-' + y + '-' + z;\n}\n\nfunction get_value(input) {\n  let v = input;\n  while (v && !is_nil(v.value)) v = v.value;\n  return is_nil(v) ? '' : v;\n}\n\nfunction normalize_png_name(name) {\n  let prefix = is_nil(name)\n    ? Date.now()\n    : String(name).replace(/\\/.png$/g, '');\n  return prefix + '.png';\n}\n\nfunction cache_image(src, fn, delay = 0) {\n  let img = new Image();\n  img.crossOrigin = 'anonymous';\n  img.src = src;\n  img.onload = function() {\n    setTimeout(fn, delay);\n  }\n}\n\nfunction is_safari() {\n  return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n}\n\nfunction un_entity(code) {\n  let textarea = document.createElement('textarea');\n  textarea.innerHTML = code;\n  return textarea.value;\n}\n\nfunction entity(code) {\n  return code\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n}\n\n/* cyrb53 */\nfunction hash(str, seed = 0) {\n  let h1 = 0xdeadbeef ^ seed, h2 = 0x41c6ce57 ^ seed;\n  for (let i = 0, ch; i < str.length; i++) {\n    ch = str.charCodeAt(i);\n    h1 = Math.imul(h1 ^ ch, 2654435761);\n    h2 = Math.imul(h2 ^ ch, 1597334677);\n  }\n  h1 = Math.imul(h1 ^ (h1>>>16), 2246822507) ^ Math.imul(h2 ^ (h2>>>13), 3266489909);\n  h2 = Math.imul(h2 ^ (h2>>>16), 2246822507) ^ Math.imul(h1 ^ (h1>>>13), 3266489909);\n  return 4294967296 * (2097151 & h2) + (h1>>>0);\n}\n\nfunction make_tag_function(fn) {\n  let get_value = v => is_nil(v) ? '' : v;\n  return (input, ...vars) => {\n    let string = make_array(input).reduce((s, c, i) => s + c + get_value(vars[i]), '');\n    return fn(string);\n  };\n}\n\nfunction next_id() {\n  let id = 0;\n  return (prefix = '') => `${prefix}-${++id}`;\n}\n\nfunction lerp(t, a, b) {\n  return a + t * (b - a);\n}\n\nfunction unique_id(prefix = '') {\n  return prefix + Math.random().toString(32).substr(2);\n}\n\nfunction make_array(arr) {\n  if (is_nil(arr)) return [];\n  return Array.isArray(arr) ? arr : [arr];\n}\n\nexport {\n  clamp,\n  maybe,\n  range,\n  add_alias,\n  is_letter,\n  is_nil,\n  is_invalid_number,\n  is_empty,\n  lazy,\n  sequence,\n  cell_id,\n  get_value,\n  normalize_png_name,\n  cache_image,\n  is_safari,\n  un_entity,\n  entity,\n  hash,\n  make_tag_function,\n  next_id,\n  lerp,\n  unique_id,\n}\n", "import { is_empty } from '../utils/index.js';\nimport { scan, iterator } from './tokenizer.js';\n\nfunction parse(input, option = {symbol: ',', noSpace: false}) {\n  let group = [];\n  let skip = false;\n  let tokens = [];\n  let parenStack = [];\n  let quoteStack = [];\n\n  if (is_empty(input)) {\n    return group;\n  }\n\n  let iter = iterator(scan(input));\n\n  function isSeperator(token) {\n    let symbol = option.symbol || ',';\n    if (option.noSpace) {\n      return token.isSymbol(symbol);\n    }\n    return token.isSymbol(symbol) || token.isSpace();\n  }\n\n  while (iter.next()) {\n    let { prev, curr, next }  = iter.get();\n    if (curr.isSymbol('(')) {\n      parenStack.push(curr.value);\n    }\n    if (curr.isSymbol(')')) {\n      parenStack.pop();\n    }\n    if (curr.status === 'open') {\n      quoteStack.push(curr.value);\n    }\n    if (curr.status === 'close') {\n      quoteStack.pop();\n    }\n    let emptyStack = (!parenStack.length && !quoteStack.length);\n    if (emptyStack) {\n      let isNextSpace = option.noSpace && curr.isSpace() && isSeperator(next);\n      let isPrevSpace = option.noSpace && curr.isSpace() && isSeperator(prev);\n      if (isNextSpace || isPrevSpace) continue;\n    }\n    if (emptyStack && isSeperator(curr)) {\n      group.push(joinTokens(tokens));\n      tokens = [];\n    } else {\n      tokens.push(curr);\n    }\n  }\n\n  if (tokens.length) {\n    group.push(joinTokens(tokens));\n  }\n\n  return group;\n}\n\nfunction joinTokens(tokens) {\n  return tokens.map(n => n.value).join('');\n}\n\nexport default parse;\n", "import { scan, iterator } from './tokenizer.js';\nimport parseValueGroup from './parse-value-group.js';\n\nfunction readStatement(iter, token) {\n  let fragment = [];\n  let inlineBlock;\n  let stackQuote = [];\n  let stackParen = [];\n  while (iter.next()) {\n    let { curr, next } = iter.get();\n    if (curr.isSymbol('(') && !stackQuote.length) {\n      stackParen.push(curr);\n    } else if (curr.isSymbol(')') && !stackQuote.length) {\n      stackParen.pop();\n    }\n    let isStatementBreak = !stackQuote.length && !stackParen.length && (!next || curr.isSymbol(';') || next.isSymbol('}'));\n    if (curr.isSymbol(\"'\", '\"')) {\n      if (curr.status === 'open') {\n        stackQuote.push(curr);\n      } else {\n        stackQuote.pop();\n      }\n      if ((next && next.isSymbol('}')) && !stackQuote.length) {\n        isStatementBreak = true;\n      }\n    }\n    if (!stackParen.length && !stackQuote.length && curr.isSymbol('{')) {\n      let selectors = getSelectors(fragment);\n      if (!selectors.length) {\n        continue;\n      }\n      let tokenName = selectors.pop();\n      let skip = isSkip(...selectors, tokenName);\n      inlineBlock = resolveId(walk(iter, splitTimes(tokenName, {\n        type: 'block',\n        inline: true,\n        name: tokenName,\n        value: [],\n      })), skip);\n\n      while (tokenName = selectors.pop()) {\n        inlineBlock = resolveId(splitTimes(tokenName, {\n          type: 'block',\n          name: tokenName,\n          value: [inlineBlock]\n        }), skip);\n      }\n      break;\n    }\n    fragment.push(curr);\n    if (isStatementBreak) {\n      break;\n    }\n  }\n  if (fragment.length && !inlineBlock) {\n    token._valueTokens = fragment;\n    token.value = joinToken(fragment);\n  } else if (inlineBlock) {\n    token.value = inlineBlock;\n  }\n  if (token.origin) {\n    token.origin.value = token.value;\n  }\n  return token;\n}\n\nfunction readStyle(iter) {\n  let stack = [];\n  let style = [];\n  while (iter.next()) {\n    let { curr } = iter.get();\n    if (curr.isSymbol('{')) {\n      stack.push(curr.value);\n    } else if (curr.isSymbol('}')) {\n      if (stack.length) {\n        stack.pop();\n      } else {\n        break;\n      }\n    }\n    style.push(curr.value);\n  }\n  return style.join('');\n}\n\nfunction walk(iter, parentToken) {\n  let rules = [];\n  let fragment = [];\n  let tokenType = parentToken && parentToken.type || '';\n  let stack = [];\n\n  while (iter.next()) {\n    let { prev, curr, next } = iter.get();\n    if (curr.isSymbol('(')) {\n      stack.push(curr.value);\n    }\n    if (curr.isSymbol(')')) {\n      stack.pop();\n    }\n    let isBlockBreak = !next || curr.isSymbol('}');\n    if (isBlock(tokenType) && isBlockBreak) {\n      if (!next && rules.length && !curr.isSymbol('}')) {\n        let last = rules[rules.length - 1].value;\n        if (typeof last === 'string') {\n          rules[rules.length - 1].value += (';' + curr.value);\n        }\n      }\n      parentToken.value = rules;\n      break;\n    }\n    else if (curr.isSymbol('{')) {\n      let selectors = getSelectors(fragment);\n      if (!selectors.length) {\n        continue;\n      }\n      if (isSkip(parentToken.name)) {\n        selectors = [joinToken(fragment)];\n      }\n      let tokenName = selectors.pop();\n      let skip = isSkip(...selectors, parentToken.name, tokenName);\n\n      if (tokenName === 'style') {\n        rules.push({\n          type: 'block',\n          name: tokenName,\n          value: readStyle(iter)\n        });\n      } else {\n        let block = resolveId(walk(iter, splitTimes(tokenName, {\n          type: 'block',\n          name: tokenName,\n          value: []\n        })), skip);\n\n        while (tokenName = selectors.pop()) {\n          block = resolveId(splitTimes(tokenName, {\n            type: 'block',\n            name: tokenName,\n            value: [block]\n          }), skip);\n        }\n        rules.push(block);\n      }\n      fragment = [];\n    }\n    else if (\n      curr.isSymbol(':')\n      && !stack.length\n      && !isSpecialProperty(prev, next)\n      && fragment.length\n    ) {\n      let props = getGroups(fragment, token => token.isSymbol(','));\n      let intial = {\n        type: 'statement',\n        name: 'unkown',\n        value: ''\n      }\n      if (props.length > 1) {\n        intial.origin = {\n          name: props\n        };\n      }\n      let statement = readStatement(iter, intial);\n      let groupdValue = parseValueGroup(statement.value);\n      let expand = (props.length > 1 && groupdValue.length === props.length);\n\n      props.forEach((prop, i) => {\n        let item = Object.assign({}, statement, { name: prop });\n        if (/^\\-\\-/.test(prop)) {\n          item.variable = true;\n        }\n        if (expand) {\n          item.value = groupdValue[i];\n        }\n        if (/viewBox/i.test(prop)) {\n          item.detail = parseViewBox(item.value, item._valueTokens);\n        }\n        delete item._valueTokens;\n        rules.push(item);\n      });\n      if (isBlock(tokenType)) {\n        parentToken.value = rules;\n      }\n      fragment = [];\n    }\n    else if (curr.isSymbol(';')) {\n      if (rules.length && fragment.length) {\n        rules[rules.length - 1].value += (';' + joinToken(fragment));\n        fragment = [];\n      }\n    }\n    else {\n      fragment.push(curr);\n    }\n  }\n\n  if (rules.length && isBlock(tokenType)) {\n    parentToken.value = rules;\n  }\n  return tokenType ? parentToken : rules;\n}\n\nfunction isSpecialProperty(prev, next) {\n  const names = [\n    'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role',\n    'xlink:show',    'xlink:title',   'xlink:type',\n    'xml:base',      'xml:lang',      'xml:space',\n  ];\n  let prevValue = prev && prev.value;\n  let nextValue = next && next.value;\n  return names.includes(prevValue + ':' + nextValue);\n}\n\nfunction joinToken(tokens) {\n  return tokens\n    .filter((token, i) => {\n      if (token.isSymbol(';', '}') && i === tokens.length - 1) return false;\n      return true;\n    })\n    .map(n => n.value).join('');\n}\n\nfunction resolveId(block, skip) {\n  let name = block.name || '';\n  let [tokenName, ...ids] = name.split(/#/);\n  let id = ids[ids.length - 1];\n  if (tokenName && id && !skip) {\n    block.name = tokenName;\n    block.value.push({\n      type: 'statement',\n      name: 'id',\n      value: id,\n    });\n  }\n  return block;\n}\n\nfunction getGroups(tokens, fn) {\n  let group = [];\n  let temp = [];\n  tokens.forEach(token => {\n    if (fn(token)) {\n      group.push(joinToken(temp));\n      temp = [];\n    } else {\n      temp.push(token);\n    }\n  });\n  if (temp.length) {\n    group.push(joinToken(temp));\n  }\n  return group;\n}\n\nfunction getSelectors(tokens) {\n  let result = [];\n  let it = iterator(tokens);\n  let temp = [];\n  let hasSymbol;\n  while (it.next()) {\n    let { prev, curr, next } = it.get();\n    let isTimeSymbol = (\n      prev && next &&\n      curr.value === 'x' &&\n      prev.isNumber()  &&\n      next.isNumber()\n    );\n    if (curr.isWord() && !hasSymbol && !isTimeSymbol) {\n      result.push(curr.value.trim());\n    } else {\n      result[result.length - 1] =\n        (result[result.length - 1] + curr.value).trim();\n    }\n    if (curr.isSymbol()) {\n      hasSymbol = true;\n    } else if (!curr.isSpace()) {\n      hasSymbol = false;\n    }\n  }\n  return result;\n}\n\nfunction parseViewBox(value, tokens) {\n  const viewBox = { value: [] };\n  let temp;\n  if (!Array.isArray(tokens)) {\n    return viewBox;\n  }\n  for (let token of tokens) {\n    if (token.isSpace() || token.isSymbol(',', ';')) {\n      continue;\n    }\n    if (viewBox.value.length < 4 && token.isNumber()) {\n      viewBox.value.push(Number(token.value));\n    }\n    else if (token.isNumber() && temp) {\n      viewBox[temp] = Number(token.value);\n      temp = null;\n    }\n    else if (token.isWord()) {\n      temp = token.value;\n    }\n  }\n  return viewBox;\n}\n\nfunction splitTimes(name, object) {\n  let target = Object.assign({}, object);\n  if (/\\*\\s*[0-9]/.test(name)) {\n    let [tokenName, times] = name.split('*');\n    if (times) {\n      target.times = times.trim();\n      target.pureName = tokenName.trim();\n    }\n  }\n  return target;\n}\n\nfunction isSkip(...names) {\n  return names.some(n => n === 'style');\n}\n\nfunction isBlock(type) {\n  return type === 'block';\n}\n\nfunction skipHeadSVG(block) {\n  let headSVG, headVariables = [];\n  for (let item of block.value) {\n    if (item.name === 'svg') {\n      headSVG = item;\n    }\n    if (item.variable) {\n      headVariables.push(item);\n    }\n  }\n  if (headSVG) {\n    headSVG.value.push(...headVariables);\n    return headSVG;\n  }\n  return block;\n}\n\nfunction parse(source, root) {\n  let iter = iterator(scan(source));\n  let tokens = walk(iter, root || {\n    type: 'block',\n    name: 'svg',\n    value: []\n  });\n  return skipHeadSVG(tokens);\n}\n\nexport default parse;\n", "function generate(token, last) {\n  let result = '';\n  if (token.type === 'block') {\n    let isInline = Array.isArray(token.value) && token.value[0] && token.value[0].inline;\n    if (token.times) {\n      result += ('@M' + token.times + '(' + token.pureName + '{');\n    } else {\n      result += token.name + (isInline ? ' ' : '{');\n    }\n    if (token.name === 'style') {\n      result += token.value;\n    }\n    else if (Array.isArray(token.value) && token.value.length) {\n      let lastGroup = '';\n      for (let t of token.value) {\n        result += generate(t, lastGroup);;\n        if (t.origin) {\n          lastGroup = t.origin.name.join(',');\n        }\n      }\n    }\n    if (token.times) {\n      result += '})';\n    } else if (!isInline) {\n      result += '}';\n    }\n  } else if (token.type === 'statement') {\n    let skip = (token.origin && last === token.origin.name.join(','));\n    let name = token.origin ? token.origin.name.join(',') : token.name;\n    let value = token.origin ? token.origin.value : token.value;\n    if (!skip) {\n      result += (value && value.type)\n        ? (name + ':' + generate(value))\n        : (name + ':' + value + ';');\n    }\n  }\n  return result;\n}\n\nfunction generate_svg_extended(token) {\n  return generate(token).trim();\n}\n\nexport {\n  generate_svg_extended,\n}\n", "import { is_nil } from './index.js';\n\nfunction make_array(arr) {\n  if (is_nil(arr)) return [];\n  return Array.isArray(arr) ? arr : [arr];\n}\n\nfunction join(arr, spliter = '\\n') {\n  return (arr || []).join(spliter);\n}\n\nfunction last(arr, n = 1) {\n  if (is_nil(arr)) return '';\n  return arr[arr.length - n];\n}\n\nfunction first(arr) {\n  return arr[0];\n}\n\nfunction clone(arr) {\n  return JSON.parse(JSON.stringify(arr));\n}\n\nfunction duplicate(arr) {\n  return [].concat(arr, arr);\n}\n\nfunction flat_map(arr, fn) {\n  if (Array.prototype.flatMap) return arr.flatMap(fn);\n  return arr.reduce((acc, x) => acc.concat(fn(x)), []);\n}\n\nfunction remove_empty_values(arr) {\n  return arr.filter(v => (\n    !is_nil(v) && String(v).trim().length\n  ));\n}\n\nexport {\n  make_array,\n  join,\n  last,\n  first,\n  clone,\n  duplicate,\n  flat_map,\n  remove_empty_values,\n}\n", "// I need to rewrite this\n\nimport parse_var from './parse-var.js';\nimport parse_svg from './parse-svg.js';\nimport { generate_svg_extended } from '../generator/svg-extended.js';\nimport { first, last, clone } from '../utils/list.js';\n\nconst Tokens = {\n  func(name = '') {\n    return {\n      type: 'func',\n      name,\n      arguments: []\n    };\n  },\n  argument() {\n    return {\n      type: 'argument',\n      value: []\n    };\n  },\n  text(value = '') {\n    return {\n      type: 'text',\n      value\n    };\n  },\n  pseudo(selector = '') {\n    return {\n      type: 'pseudo',\n      selector,\n      styles: []\n    };\n  },\n  cond(name = '') {\n    return {\n      type: 'cond',\n      name,\n      styles: [],\n      arguments: []\n    };\n  },\n  rule(property = '') {\n    return {\n      type: 'rule',\n      property,\n      value: []\n    };\n  },\n  keyframes(name = '') {\n    return {\n      type: 'keyframes',\n      name,\n      steps: []\n    }\n  },\n\n  step(name = '') {\n    return {\n      type: 'step',\n      name,\n      styles: []\n    }\n  }\n};\n\nconst is = {\n  white_space(c) {\n    return /[\\s\\n\\t]/.test(c);\n  },\n  line_break(c) {\n    return /\\n/.test(c);\n  },\n  number(n) {\n    return !isNaN(n);\n  },\n  pair(n) {\n    return ['\"', '(', ')', \"'\"].includes(n);\n  },\n  pair_of(c, n) {\n    return ({ '\"': '\"', \"'\": \"'\", '(': ')' })[c] == n;\n  }\n};\n\n// This should not be in the parser\n// but I'll leave it here until the rewriting\nconst symbols = {\n  'π': Math.PI,\n  '∏': Math.PI\n};\n\nfunction composible(name) {\n  return ['@canvas', '@shaders', '@doodle'].includes(name);\n}\n\nfunction iterator(input = '') {\n  let index = 0, col = 1, line = 1;\n  return {\n    curr(n = 0) {\n      return input[index + n];\n    },\n    end() {\n      return input.length <= index;\n    },\n    info() {\n      return { index, col, line };\n    },\n    index(n) {\n      return (n === undefined ? index : index = n);\n    },\n    range(start, end) {\n      return input.substring(start, end);\n    },\n    next() {\n      let next = input[index++];\n      if (next == '\\n') line++, col = 0;\n      else col++;\n      return next;\n    }\n  };\n}\n\nfunction throw_error(msg, { col, line }) {\n  console.warn(\n    `(at line ${ line }, column ${ col }) ${ msg }`\n  );\n}\n\nfunction get_text_value(input) {\n  if (input.trim().length) {\n    return is.number(+input) ? +input : input.trim()\n  } else {\n    return input;\n  }\n}\n\nfunction read_until(fn) {\n  return function(it, reset) {\n    let index = it.index();\n    let word = '';\n    while (!it.end()) {\n      let c = it.next();\n      if (fn(c)) break;\n      else word += c;\n    }\n    if (reset) {\n      it.index(index);\n    }\n    return word;\n  }\n}\n\nfunction read_word(it, reset) {\n  let check = c => /[^\\w@]/.test(c);\n  return read_until(check)(it, reset);\n}\n\nfunction read_keyframe_name(it) {\n  return read_until(c => /[\\s\\{]/.test(c))(it);\n}\n\nfunction read_line(it, reset) {\n  let check = c => is.line_break(c) || c == '{';\n  return read_until(check)(it, reset);\n}\n\nfunction read_step(it, extra) {\n  let c, step = Tokens.step();\n  while (!it.end()) {\n    if ((c = it.curr()) == '}') break;\n    if (is.white_space(c)) {\n      it.next();\n      continue;\n    }\n    else if (!step.name.length) {\n      step.name = read_selector(it);\n    }\n    else {\n      step.styles.push(read_rule(it, extra));\n      if (it.curr() == '}') break;\n    }\n    it.next();\n  }\n  return step;\n}\n\nfunction read_steps(it, extra) {\n  const steps = [];\n  let c;\n  while (!it.end()) {\n    if ((c = it.curr()) == '}') break;\n    else if (is.white_space(c)) {\n      it.next();\n      continue;\n    }\n    else {\n      steps.push(read_step(it, extra));\n    }\n    it.next();\n  }\n  return steps;\n}\n\nfunction read_keyframes(it, extra) {\n  let keyframes = Tokens.keyframes(), c;\n  while (!it.end()) {\n    if ((c = it.curr()) == '}') break;\n    else if (!keyframes.name.length) {\n      read_word(it);\n      keyframes.name = read_keyframe_name(it);\n      if (!keyframes.name.length) {\n        throw_error('missing keyframes name', it.info());\n        break;\n      }\n      continue;\n    }\n    else if (c == '{' || it.curr(-1) == '{') {\n      it.next();\n      keyframes.steps = read_steps(it, extra);\n      break;\n    }\n    it.next();\n  }\n  return keyframes;\n}\n\nfunction read_comments(it, flag = {}) {\n  it.next();\n  while (!it.end()) {\n    let c = it.curr();\n    if (flag.inline) {\n      if (c == '\\n') break;\n    }\n    else {\n      if ((c = it.curr()) == '*' && it.curr(1) == '/') break;\n    }\n    it.next();\n  }\n  if (!flag.inline) {\n    it.next(); it.next();\n  }\n}\n\nfunction skip_tag(it) {\n  it.next();\n  while(!it.end()) {\n    let c = it.curr();\n    if (c == '>') break;\n    it.next();\n  }\n}\n\nfunction read_property(it) {\n  let prop = '', c;\n  while (!it.end()) {\n    if ((c = it.curr()) == ':') break;\n    else if (!is.white_space(c)) prop += c;\n    it.next();\n  }\n  return prop;\n}\n\nfunction read_arguments(it, composition, doodle) {\n  let args = [], group = [], stack = [], arg = '', c;\n  let raw = '';\n  while (!it.end()) {\n    c = it.curr();\n    let prev = it.curr(-1);\n    let start = it.index();\n    if ((/[\\('\"`]/.test(c) && prev !== '\\\\')) {\n      if (stack.length) {\n        if ((c !== '(') && last(stack) === '(') {\n          stack.pop();\n        }\n        if (c != '(' && c === last(stack)) {\n          stack.pop();\n        } else {\n          stack.push(c);\n        }\n      } else {\n        stack.push(c);\n      }\n      arg += c;\n    }\n    else if ((c == '@' || (prev === '.' && composition)) && !doodle) {\n      if (!group.length) {\n        arg = arg.trimLeft();\n      }\n      if (arg.length) {\n        group.push(Tokens.text(arg));\n        arg = '';\n      }\n      group.push(read_func(it));\n    }\n    else if (doodle && /[)]/.test(c) || (!doodle && /[,)]/.test(c))) {\n      if (stack.length) {\n        if (c == ')' && last(stack) === '(') {\n          stack.pop();\n        }\n        arg += c;\n      }\n      else {\n        if (arg.length) {\n          if (!group.length) {\n            group.push(Tokens.text(get_text_value(arg)));\n          } else if (/\\S/.test(arg)) {\n            group.push(Tokens.text(arg));\n          }\n          if (arg.startsWith('±') && !doodle) {\n            let raw = arg.substr(1);\n            let cloned = clone(group);\n            last(cloned).value = '-' + raw;\n            args.push(normalize_argument(cloned));\n            last(group).value = raw;\n          }\n        }\n\n        args.push(normalize_argument(group));\n\n        [group, arg] = [[], ''];\n\n        if (c == ')') break;\n      }\n    }\n    else {\n      if (symbols[c] && !/[0-9]/.test(it.curr(-1))) {\n        c = symbols[c];\n      }\n      arg += c;\n    }\n    if (composition && (it.curr(1) == ')' || !/[0-9a-zA-Z_\\-.]/.test(it.curr())) && !stack.length) {\n      if (group.length) {\n        args.push(normalize_argument(group));\n      }\n      break;\n    }\n    else {\n      raw += it.range(start, it.index() + 1);\n      it.next();\n    }\n  }\n  return [skip_last_empty_args(args), raw];\n}\n\nfunction skip_last_empty_args(args) {\n  let arg = last(args[0]);\n  if (arg && arg.type === 'text' && !String(arg.value).trim().length) {\n    args[0] = args[0].slice(0, -1);\n  }\n  return args;\n}\n\nfunction normalize_argument(group) {\n  let result = group.map(arg => {\n    if (arg.type == 'text' && typeof arg.value == 'string') {\n      let value = String(arg.value);\n      if (value.includes('`')) {\n        arg.value = value = value.replace(/`/g, '\"');\n      }\n      arg.value = value;\n    }\n    return arg;\n  });\n\n  let ft = first(result) || {};\n  let ed = last(result) || {};\n  if (ft.type == 'text' && ed.type == 'text') {\n    let cf = first(ft.value);\n    let ce  = last(ed.value);\n    if (typeof ft.value == 'string' && typeof ed.value == 'string') {\n      if (is.pair_of(cf, ce)) {\n        ft.value = ft.value.slice(1);\n        ed.value = ed.value.slice(0, ed.value.length - 1);\n        result.cluster = true;\n      }\n    }\n  }\n\n  return result;\n}\n\nfunction seperate_func_name(name) {\n  let fname = '', extra = '';\n  if ((/\\D$/.test(name) && !/\\d+[x-]\\d+/.test(name)) || Math[name.substr(1)]) {\n    return { fname: name, extra }\n  }\n  for (let i = name.length - 1; i >= 0; i--) {\n    let c = name[i];\n    let prev = name[i - 1];\n    let next = name[i + 1];\n    if (/[\\d.]/.test(c) || ((c == 'x' || c == '-') && /\\d/.test(prev) && /\\d/.test(next))) {\n      extra = c + extra;\n    } else {\n      fname = name.substring(0, i + 1);\n      break;\n    }\n  }\n  return { fname, extra };\n}\n\nfunction has_times_syntax(token) {\n  let str = JSON.stringify(token);\n  return str.includes('pureName') && str.includes('times');\n}\n\nfunction is_svg(name) {\n  return /^@svg$/i.test(name);\n}\n\nfunction read_func(it) {\n  let func = Tokens.func();\n  let name = it.curr(), c;\n  let has_argument = false;\n  if (name === '@') {\n    it.next();\n  } else {\n    name = '@';\n  }\n  while (!it.end()) {\n    c = it.curr();\n    let next = it.curr(1);\n    let composition = (c == '.' && (next == '@' || /[a-zA-Z]/.test(next)));\n    if (c == '(' || composition) {\n      has_argument = true;\n      it.next();\n      let [args, raw_args] = read_arguments(it, composition, composible(name));\n      if (is_svg(name) && /\\d\\s*{/.test(raw_args)) {\n        let parsed_svg = parse_svg(raw_args);\n        if (has_times_syntax(parsed_svg)) {\n          let svg = generate_svg_extended(parsed_svg);\n          // compatible with old iterator\n          svg += ')';\n          let extended = read_arguments(iterator(svg), composition, composible(name));\n          args = extended[0];\n        }\n      }\n      func.arguments = args;\n      break;\n    } else if (/[0-9a-zA-Z_\\-.]/.test(c)) {\n      name += c;\n    }\n    if (!has_argument && next !== '(' && !/[0-9a-zA-Z_\\-.]/.test(next)) {\n      break;\n    }\n    it.next();\n  }\n  let { fname, extra } = seperate_func_name(name);\n  func.name = fname;\n\n  if (extra.length) {\n    func.arguments.unshift([{\n      type: 'text',\n      value: extra\n    }]);\n  }\n\n  func.position = it.info().index;\n  return func;\n}\n\nfunction read_value(it) {\n  let text = Tokens.text(), idx = 0, skip = true, c;\n  const value = [];\n  value[idx] = [];\n  let stack = [], quote_stack = [];\n\n  while (!it.end()) {\n    c = it.curr();\n\n    if (skip && is.white_space(c)) {\n      it.next();\n      continue;\n    } else {\n      skip = false;\n    }\n\n    if (c == '\\n' && !is.white_space(it.curr(-1))) {\n      text.value += ' ';\n    }\n    else if (c == ',' && !stack.length) {\n      if (text.value.length) {\n        value[idx].push(text);\n        text = Tokens.text();\n      }\n      value[++idx] = [];\n      skip = true;\n    }\n    else if (/[;}<]/.test(c) && !quote_stack.length) {\n      if (text.value.length) {\n        value[idx].push(text);\n        text = Tokens.text();\n      }\n      break;\n    }\n    else if (c == '@' && /\\w/.test(it.curr(1))) {\n      if (text.value.length) {\n        value[idx].push(text);\n        text = Tokens.text();\n      }\n      value[idx].push(read_func(it));\n    }\n    else if (c === '\"' || c === \"'\") {\n      let quote = last(quote_stack);\n      if (c === quote) {\n        quote_stack.pop();\n      } else if (!quote_stack.length) {\n        quote_stack.push(c);\n      }\n      text.value += c;\n    }\n    else if (!is.white_space(c) || !is.white_space(it.curr(-1))) {\n      if (c == '(') stack.push(c);\n      if (c == ')') stack.pop();\n\n      if (symbols[c] && !/[0-9]/.test(it.curr(-1))) {\n        c = symbols[c];\n      }\n      text.value += c;\n    }\n    it.next();\n  }\n  if (text.value.length) {\n    value[idx].push(text);\n  }\n  return value;\n}\n\nfunction read_selector(it) {\n  let selector = '', c;\n  while (!it.end()) {\n    if ((c = it.curr()) == '{') break;\n    else if (!is.white_space(c)) {\n      selector += c;\n    }\n    it.next();\n  }\n  return selector;\n}\n\nfunction read_cond_selector(it) {\n  let selector = { name: '', arguments: [] }, c;\n  while (!it.end()) {\n    if ((c = it.curr()) == '(') {\n      it.next();\n      selector.arguments = read_arguments(it)[0];\n    }\n    else if (/[){]/.test(c)) break;\n    else if (!is.white_space(c)) selector.name += c;\n    it.next();\n  }\n  return selector;\n}\n\nfunction read_pseudo(it, extra) {\n  let pseudo = Tokens.pseudo(), c;\n  while (!it.end()) {\n    c = it.curr();\n    if (c == '/' && it.curr(1) == '*') {\n      read_comments(it);\n    }\n    else if (c == '}') {\n      break;\n    }\n    else if (is.white_space(c)) {\n      it.next();\n      continue;\n    }\n    else if (!pseudo.selector) {\n      pseudo.selector = read_selector(it);\n    }\n    else {\n      let rule = read_rule(it, extra);\n      if (rule.property == '@use') {\n        pseudo.styles = pseudo.styles.concat(\n          rule.value\n        );\n      } else {\n        pseudo.styles.push(rule);\n      }\n      if (it.curr() == '}') break;\n    }\n    it.next();\n  }\n  return pseudo;\n}\n\nfunction read_rule(it, extra) {\n  let rule = Tokens.rule(), c;\n  let start = it.index();\n  while (!it.end()) {\n    c = it.curr();\n    if (c == '/' && it.curr(1) == '*') {\n      read_comments(it);\n    }\n    else if (c == ';') {\n      break;\n    }\n    else if (!rule.property.length) {\n      rule.property = read_property(it);\n      if (rule.property == '@use') {\n        rule.value = read_var(it, extra);\n        break;\n      }\n    }\n    else {\n      rule.value = read_value(it);\n      break;\n    }\n    it.next();\n  }\n  let end = it.index();\n  rule.raw = () => it.range(start, end).trim();\n  return rule;\n}\n\nfunction read_cond(it, extra) {\n  let cond = Tokens.cond(), c;\n  while (!it.end()) {\n    c = it.curr();\n    if (c == '/' && it.curr(1) == '*') {\n      read_comments(it);\n    }\n    else if (c == '}') {\n      break;\n    }\n    else if (!cond.name.length) {\n      Object.assign(cond, read_cond_selector(it));\n    }\n    else if (c == ':') {\n      let pseudo = read_pseudo(it);\n      if (pseudo.selector) cond.styles.push(pseudo);\n    }\n    else if (c == '@' && !read_line(it, true).includes(':')) {\n      cond.styles.push(read_cond(it));\n    }\n    else if (!is.white_space(c)) {\n      let rule = read_rule(it, extra);\n      if (rule.property) cond.styles.push(rule);\n      if (it.curr() == '}') break;\n    }\n    it.next();\n  }\n  return cond;\n}\n\nfunction read_variable(extra, name) {\n  let rule = '';\n  if (extra && extra.get_variable) {\n    rule = extra.get_variable(name);\n  }\n  return rule;\n}\n\nfunction evaluate_value(values, extra) {\n  values.forEach && values.forEach(v => {\n    if (v.type == 'text' && v.value) {\n      let vars = parse_var(v.value);\n      v.value = vars.reduce((ret, p) => {\n        let rule = '', other = '', parsed;\n        rule = read_variable(extra, p.name);\n        if (!rule && p.fallback) {\n          p.fallback.every(n => {\n            other = read_variable(extra, n.name);\n            if (other) {\n              rule = other;\n              return false;\n            }\n          });\n        }\n        try {\n          parsed = parse(rule, extra);\n        } catch (e) { }\n        if (parsed) {\n          ret.push.apply(ret, parsed);\n        }\n        return ret;\n      }, []);\n    }\n    if (v.type == 'func' && v.arguments) {\n      v.arguments.forEach(arg => {\n        evaluate_value(arg, extra);\n      });\n    }\n  });\n}\n\nfunction read_var(it, extra) {\n  it.next();\n  let groups = read_value(it) || [];\n  return groups.reduce((ret, group) => {\n    evaluate_value(group, extra);\n    let [token] = group;\n    if (token.value && token.value.length) {\n      ret.push(...token.value);\n    }\n    return ret;\n  }, []);\n}\n\nexport default function parse(input, extra) {\n  const it = iterator(input);\n  const Tokens = [];\n  while (!it.end()) {\n    let c = it.curr();\n    if (is.white_space(c)) {\n      it.next();\n      continue;\n    }\n    else if (c == '/' && it.curr(1) == '*') {\n      read_comments(it);\n    }\n    else if (c == ':') {\n      let pseudo = read_pseudo(it, extra);\n      if (pseudo.selector) Tokens.push(pseudo);\n    }\n    else if (c == '@' && read_word(it, true) === '@keyframes') {\n      let keyframes = read_keyframes(it, extra);\n      Tokens.push(keyframes);\n    }\n    else if (c == '@' && !read_line(it, true).includes(':')) {\n      let cond = read_cond(it, extra);\n      if (cond.name.length) Tokens.push(cond);\n    }\n    else if (c == '<') {\n      skip_tag(it);\n    }\n    else if (!is.white_space(c)) {\n      let rule = read_rule(it, extra);\n      if (rule.property) Tokens.push(rule);\n    }\n    it.next();\n  }\n  return Tokens;\n}\n", "import { clamp } from '../utils/index.js';\n\nexport default function parse_grid(size, GRID = 64) {\n  const [min, max, total] = [1, GRID, GRID * GRID];\n\n  let [x, y, z] = (size + '')\n    .replace(/\\s+/g, '')\n    .replace(/[,，xX]+/g, 'x')\n    .split('x')\n    .map(n => parseInt(n));\n\n  const max_xy = (x == 1 || y == 1) ? total : max;\n  const max_z = (x == 1 && y == 1) ? total : min;\n\n  const ret = {\n    x: clamp(x || min, 1, max_xy),\n    y: clamp(y || x || min, 1, max_xy),\n    z: clamp(z || min, 1, max_z)\n  };\n\n  return Object.assign({}, ret, {\n    count: ret.x * ret.y * ret.z,\n    ratio: ret.x / ret.y\n  });\n}\n", "import { scan, iterator, Token } from './tokenizer.js';\nimport { is_empty } from '../utils/index.js';\n\nfunction parse(input) {\n  let scanOptions = {\n    preserveLineBreak: true,\n    ignoreInlineComment: true,\n  };\n  let iter = iterator(removeParens(scan(input, scanOptions)));\n  let stack = [];\n  let tokens = [];\n  let identifier;\n  let line;\n  let result = {\n    textures: [],\n  };\n  while (iter.next()) {\n    let { curr, next } = iter.get();\n    if (curr.isSymbol('{')) {\n      if (!stack.length) {\n        let name = joinToken(tokens);\n        if (isIdentifier(name)) {\n          identifier = name;\n          tokens = [];\n        } else {\n          tokens.push(curr);\n        }\n      } else {\n        tokens.push(curr);\n      }\n      stack.push('{');\n    }\n    else if (curr.isSymbol('}')) {\n      stack.pop();\n      if (!stack.length && identifier) {\n        let value = joinToken(tokens);\n        if (identifier && value.length) {\n          if (identifier.startsWith('texture')) {\n            result.textures.push({\n              name: identifier,\n              value\n            });\n          } else {\n            result[identifier] = value;\n          }\n          tokens = [];\n        }\n        identifier = null;\n      } else {\n        tokens.push(curr);\n      }\n    }\n    else {\n      if (!is_empty(line) && line != curr.pos[1]) {\n        tokens.push(lineBreak());\n        line = null;\n      }\n      if (curr.isWord() && curr.value.startsWith('#')) {\n        tokens.push(lineBreak());\n        line = next.pos[1];\n      }\n      tokens.push(curr);\n    }\n  }\n\n  if (is_empty(result.fragment)) {\n    result.fragment = joinToken(tokens);\n    result.textures = result.textures || [];\n  }\n  return result;\n}\n\nfunction isIdentifier(name) {\n  return /^texture\\w*$|^(fragment|vertex)$/.test(name);\n}\n\nfunction lineBreak() {\n  return new Token({ type: 'LineBreak', value: '\\n' });\n}\n\nfunction removeParens(tokens) {\n  let head = tokens[0];\n  let last = tokens[tokens.length - 1];\n  while (head && head.isSymbol('(') && last && last.isSymbol(')')) {\n    tokens = tokens.slice(1, tokens.length - 1);\n    head = tokens[0];\n    last = tokens[tokens.length - 1];\n  }\n  return tokens;\n}\n\nfunction joinToken(tokens) {\n  return removeParens(tokens).map(n => n.value).join('');\n}\n\nexport default parse;\n", "const NS = 'http://www.w3.org/2000/svg';\nconst NSXLink = 'http://www.w3.org/1999/xlink';\n\nfunction create_svg_url(svg, id) {\n  let encoded = encodeURIComponent(svg) + (id ? `#${ id }` : '');\n  return `url(\"data:image/svg+xml;utf8,${ encoded }\")`;\n}\n\nfunction normalize_svg(input) {\n  const xmlns = `xmlns=\"${ NS }\"`;\n  const xmlnsXLink = `xmlns:xlink=\"${ NSXLink }\"`;\n  if (!input.includes('<svg')) {\n    input = `<svg ${ xmlns } ${ xmlnsXLink }>${ input }</svg>`;\n  }\n  if (!input.includes('xmlns')) {\n    input = input.replace(/<svg([\\s>])/, `<svg ${ xmlns } ${ xmlnsXLink }$1`);\n  }\n  return input;\n}\n\nexport {\n  create_svg_url,\n  normalize_svg,\n}\n", "import { next_id } from '../utils/index.js';\n\nconst NS = 'http://www.w3.org/2000/svg';\nconst NSXLink = 'http://www.w3.org/1999/xlink';\nconst nextId = next_id();\n\nclass Tag {\n  constructor(name, value = '') {\n    if (!name) {\n      throw new Error(\"Tag name is required\");\n    }\n    this.name = name;\n    this.body = [];\n    this.attrs = {};\n    if (this.isTextNode()) {\n      this.body = value;\n    }\n  }\n  isTextNode() {\n    return this.name === 'text-node';\n  }\n  find(target) {\n    let id = target.attrs.id;\n    let name = target.name;\n    if (Array.isArray(this.body) && id !== undefined) {\n      return this.body.find(tag => tag.attrs.id === id && tag.name === name);\n    }\n  }\n  append(tag) {\n    if (!this.isTextNode()) {\n      this.body.push(tag);\n    }\n  }\n  merge(tag) {\n    for (let [name, value] of Object.entries(tag.attrs)) {\n      this.attrs[name] = value;\n    }\n    if (Array.isArray(tag.body)) {\n      this.body.push(...tag.body);\n    }\n  }\n  attr(name, value) {\n    if (!this.isTextNode()) {\n      if (value === undefined) {\n        return this.attrs[name];\n      }\n      return this.attrs[name] = value;\n    }\n  }\n  toString() {\n    if (this.isTextNode()) {\n      return removeQuotes(this.body);\n    }\n    let attrs = [''];\n    let body = [];\n    for (let [name, value] of Object.entries(this.attrs)) {\n      value = removeQuotes(value);\n      attrs.push(`${name}=\"${value}\"`);\n    }\n    for (let tag of this.body) {\n      body.push(tag.toString());\n    }\n    return `<${this.name}${attrs.join(' ')}>${body.join('')}</${this.name}>`;\n  }\n}\n\nfunction composeStyleRule(name, value) {\n  return `${name}:${value};`\n}\n\nfunction removeQuotes(text) {\n  text = String(text);\n  let double = text.startsWith('\"') && text.endsWith('\"');\n  let single = text.startsWith(\"'\") && text.endsWith(\"'\");\n  if (double || single) {\n    return text.substring(1, text.length - 1);\n  }\n  return text;\n}\n\nfunction transformViewBox(token) {\n  let viewBox = token.detail.value;\n  let p = token.detail.padding || token.detail.expand;\n  if (!viewBox.length) {\n    return '';\n  }\n  let [x, y, w, h] = viewBox;\n  if (p) {\n    [x, y, w, h] = [x-p, x-p, w+p*2, h+p*2];\n  }\n  return `${x} ${y} ${w} ${h}`;\n}\n\nfunction generate(token, element, parent, root) {\n  let inlineId;\n  if (!element) {\n    element = new Tag('root');\n  }\n  if (token.type === 'block') {\n    // style tag\n    if (token.name === 'style') {\n      let el = new Tag('style');\n      el.append(token.value);\n      element.append(el);\n    }\n    // normal svg elements\n    else {\n      let el = new Tag(token.name);\n      if (!root) {\n        root = el;\n        root.attr('xmlns', NS);\n      }\n      for (let block of token.value) {\n        let id = generate(block, el, token, root);\n        if (id) { inlineId = id }\n      }\n      // generate id for inline block if no id is found\n      if (token.inline) {\n        let found = token.value.find(n => n.type === 'statement' && n.name === 'id');\n        if (found) {\n          inlineId = found.value;\n        } else {\n          inlineId = nextId(token.name);\n          el.attr('id', inlineId);\n        }\n      }\n      let existedTag = root.find(el);\n      if (existedTag) {\n        existedTag.merge(el);\n      } else {\n        element.append(el);\n      }\n    }\n  }\n  if (token.type === 'statement' && !token.variable) {\n    if (token.name === 'content') {\n      let text = new Tag('text-node', token.value);\n      element.append(text);\n    }\n    // inline style\n    else if (token.name.startsWith('style ')) {\n      let name = (token.name.split('style ')[1] || '').trim();\n      if (name.length) {\n        let style = element.attr('style') || '';\n        element.attr('style', style + composeStyleRule(name, token.value));\n      }\n    }\n    else {\n      let value = token.value;\n      // handle inline block value\n      if (value && value.type === 'block') {\n        let id = generate(token.value, root, token, root);\n        value = `url(#${id})`;\n        if (token.name === 'xlink:href' || token.name === 'href') {\n          value = `#${id}`;\n        }\n      }\n      if (/viewBox/i.test(token.name)) {\n        value = transformViewBox(token, value);\n        if (value) {\n          element.attr(token.name, value);\n        }\n      } else {\n        element.attr(token.name, value);\n      }\n      if (token.name.includes('xlink:')) {\n        root.attr('xmlns:xlink', NSXLink);\n      }\n    }\n  }\n  if (!parent) {\n    return root.toString();\n  }\n  return inlineId;\n}\n\nfunction generate_svg(token) {\n  return generate(token);\n}\n\nexport {\n  generate_svg,\n}\n", "import { iterator, scan } from './tokenizer.js';\n\nfunction parse(input) {\n  let iter = iterator(scan(input));\n  let ret = {};\n  let matched = false;\n  while (iter.next()) {\n    let { prev, curr, next} = iter.get();\n    let isUnit = matched\n      && (curr.isWord() || curr.isSymbol())\n      && prev && prev.isNumber()\n      && !next;\n    if (curr.isNumber()) {\n      ret.value = Number(curr.value);\n      matched = true;\n    }\n    else if (isUnit) {\n      ret.unit = curr.value;\n    } else {\n      break;\n    }\n  }\n  return ret;\n}\n\nexport default parse;\n", "import parse_compound_value from '../parser/parse-compound-value.js';\n\nfunction by_unit(fn) {\n  return (...args) => {\n    let units = [], values = [];\n    for (let arg of args) {\n      let { unit, value } = parse_compound_value(arg);\n      if (unit !== undefined) {\n        units.push(unit);\n      }\n      if (value !== undefined) {\n        values.push(value);\n      }\n    }\n    let result = fn(...values);\n    let unit = units.find(n => n !== undefined);\n    if (unit === undefined) {\n      return result;\n    }\n    if (Array.isArray(result)) {\n      return result.map(n => n + unit);\n    }\n    return result + unit;\n  }\n}\n\nfunction by_charcode(fn) {\n  return (...args) => {\n    let codes = args.map(n => String(n).charCodeAt(0));\n    let result = fn(...codes);\n    return Array.isArray(result)\n      ? result.map(n => String.fromCharCode(n))\n      : String.fromCharCode(result);\n  }\n}\n\nexport {\n  by_unit,\n  by_charcode,\n}\n", "/**\n * Based on the Shunting-yard algorithm.\n */\n\nimport { last } from './utils/list.js';\nimport { is_invalid_number } from './utils/index.js';\n\nconst default_context = {\n  'π': Math.PI,\n  gcd: (a, b) => {\n    while (b) [a, b] = [b, a % b];\n    return a;\n  }\n}\n\nconst operator = {\n  '^': 7,\n  '*': 6, '/': 6, '÷': 6, '%': 6,\n  '&': 5, '|': 5,\n  '+': 4, '-': 4,\n  '<': 3, '<<': 3,\n  '>': 3, '>>': 3,\n  '=': 3, '==': 3,\n  '≤': 3, '<=': 3,\n  '≥': 3, '>=': 3,\n  '≠': 3, '!=': 3,\n  '∧': 2, '&&': 2,\n  '∨': 2, '||': 2,\n  '(': 1 , ')': 1,\n}\n\nfunction calc(expr, context, repeat = []) {\n  let stack = [];\n  while (expr.length) {\n    let { name, value, type } = expr.shift();\n    if (type === 'variable') {\n      let result = context[value];\n      if (is_invalid_number(result)) {\n        result = Math[value];\n      }\n      if (is_invalid_number(result)) {\n        result = expand(value, context);\n      }\n      if (is_invalid_number(result)) {\n        if (/^\\-\\D/.test(value)) {\n          result = expand('-1' + value.substr(1), context);\n        }\n      }\n      if (result === undefined) {\n        result = 0;\n      }\n      if (typeof result !== 'number') {\n        repeat.push(result);\n        if (is_cycle(repeat)) {\n          result = 0;\n          repeat = [];\n        } else {\n          result = calc(infix_to_postfix(result), context, repeat)\n        }\n      }\n      stack.push(result);\n    }\n    else if (type === 'function') {\n      let negative = false;\n      if (/^\\-/.test(name)) {\n        negative = true;\n        name = name.substr(1);\n      }\n      let output = value.map(v => calc(v, context));\n      let fns = name.split('.');\n      let fname;\n      while (fname = fns.pop()) {\n        if (!fname) continue;\n        let fn = context[fname] || Math[fname];\n        output = (typeof fn === 'function')\n          ? (Array.isArray(output) ? fn(...output) : fn(output))\n          : 0;\n      }\n      if (negative) {\n        output = -1 * output;\n      }\n      stack.push(output);\n    } else {\n      if (/\\d+/.test(value)) stack.push(value);\n      else {\n        let right = stack.pop();\n        let left = stack.pop();\n        stack.push(compute(\n          value, Number(left), Number(right)\n        ));\n      }\n    }\n  }\n  return Number(stack[0]) || 0;\n}\n\nfunction get_tokens(input) {\n  let expr = String(input);\n  let tokens = [], num = '';\n\n  for (let i = 0; i < expr.length; ++i) {\n    let c = expr[i];\n    if (operator[c]) {\n      let last_token = last(tokens);\n      if (c == '=' && last_token && /^[!<>=]$/.test(last_token.value)) {\n        last_token.value += c;\n      }\n      else if (/^[|&<>]$/.test(c) && last_token && last_token.value == c) {\n        last_token.value += c;\n      }\n      else if (c == '-' && expr[i - 1] == 'e') {\n        num += c;\n      }\n      else if (!tokens.length && !num.length && /[+-]/.test(c)) {\n        num += c;\n      } else {\n        let { type, value } = last_token || {};\n        if (type == 'operator'\n            && !num.length\n            && /[^()]/.test(c)\n            && /[^()]/.test(value)) {\n          num += c;\n        } else {\n          if (num.length) {\n            tokens.push({ type: 'number', value: num });\n            num = '';\n          }\n          tokens.push({ type: 'operator', value: c });\n        }\n      }\n    }\n    else if (/\\S/.test(c)) {\n      if (c == ',') {\n        tokens.push({ type: 'number', value: num });\n        num = '';\n        tokens.push({ type: 'comma', value: c });\n      } else if (c == '!') {\n        tokens.push({ type: 'number', value: num });\n        tokens.push({ type: 'operator', value: c });\n        num = '';\n      } else {\n        num += c;\n      }\n    }\n  }\n\n  if (num.length) {\n    tokens.push({ type: 'number', value: num });\n  }\n  return tokens;\n}\n\nfunction infix_to_postfix(input) {\n  let tokens = get_tokens(input);\n  const op_stack = [], expr = [];\n\n  for (let i = 0; i < tokens.length; ++i) {\n    let { type, value } = tokens[i];\n    let next = tokens[i + 1] || {};\n    if (type == 'number') {\n      if (next.value == '(' && /[^\\d.\\-]/.test(value)) {\n        let func_body = '';\n        let stack = [];\n        let values = [];\n\n        i += 1;\n        while (tokens[i++] !== undefined) {\n          let token = tokens[i];\n          if (token === undefined) break;\n          let c = token.value;\n          if (c == ')') {\n            if (!stack.length) break;\n            stack.pop();\n            func_body += c;\n          }\n          else {\n            if (c == '(') stack.push(c);\n            if (c == ',' && !stack.length) {\n              let arg = infix_to_postfix(func_body);\n              if (arg.length) values.push(arg);\n              func_body = '';\n            } else {\n              func_body += c;\n            }\n          }\n        }\n\n        if (func_body.length) {\n          values.push(infix_to_postfix(func_body));\n        }\n\n        expr.push({\n          type: 'function',\n          name: value,\n          value: values\n        });\n      }\n      else if (/[^\\d.\\-]/.test(value)) {\n        expr.push({ type: 'variable', value });\n      }\n      else {\n        expr.push({ type: 'number', value });\n      }\n    }\n\n    else if (type == 'operator') {\n      if (value == '(') {\n        op_stack.push(value);\n      }\n\n      else if (value == ')') {\n        while (op_stack.length && last(op_stack) != '(') {\n          expr.push({ type: 'operator', value: op_stack.pop() });\n        }\n        op_stack.pop();\n      }\n\n      else {\n        while (op_stack.length && operator[last(op_stack)] >= operator[value]) {\n          let op = op_stack.pop();\n          if (!/[()]/.test(op)) expr.push({ type: 'operator', value: op });\n        }\n        op_stack.push(value);\n      }\n    }\n  }\n\n  while (op_stack.length) {\n    expr.push({ type: 'operator', value: op_stack.pop() });\n  }\n\n  return expr;\n}\n\nfunction compute(op, a, b) {\n  switch (op) {\n    case '+': return a + b;\n    case '-': return a - b;\n    case '*': return a * b;\n    case '%': return a % b;\n    case '|': return a | b;\n    case '&': return a & b;\n    case '<': return a < b;\n    case '>': return a > b;\n    case '^': return Math.pow(a, b);\n    case '÷': case '/': return a / b;\n    case '=': case '==': return a == b;\n    case '≤': case '<=': return a <= b;\n    case '≥': case '>=': return a >= b;\n    case '≠': case '!=': return a != b;\n    case '∧': case '&&': return a && b;\n    case '∨': case '||': return a || b;\n    case '<<': return a << b;\n    case '>>': return a >> b;\n  }\n}\n\nfunction expand(value, context) {\n  let [_, num, variable] = value.match(/([\\d.\\-]+)(.*)/) || [];\n  let v = context[variable];\n  if (v === undefined) {\n    return v;\n  }\n  if (typeof v === 'number') {\n    return Number(num) * v;\n  } else {\n    return num * calc(infix_to_postfix(v), context);\n  }\n}\n\nfunction is_cycle(array) {\n  return (array[0] == array[2] && array[1] == array[3]);\n}\n\nexport default function(input, context) {\n  const expr = infix_to_postfix(input);\n  return calc(expr, Object.assign({}, default_context, context));\n}\n", "import { hash, is_nil } from './index.js';\n\nclass CacheValue {\n  constructor() {\n    this.cache = {};\n  }\n  clear() {\n    this.cache = {};\n  }\n  set(input, value) {\n    if (is_nil(input)) {\n      return '';\n    }\n    let key = this.getKey(input);\n    return this.cache[key] = value;\n  }\n  get(input) {\n    let key = this.getKey(input);\n    return this.cache[key];\n  }\n  getKey(input) {\n    return (typeof input === 'string')\n      ? hash(input)\n      : hash(JSON.stringify(input));\n  }\n}\n\nexport default new CacheValue();\n", "import Cache from './cache.js';\n\nfunction memo(prefix, fn) {\n  return (...args) => {\n    let key = prefix + args.join('-');;\n    return Cache.get(key) || Cache.set(key, fn(...args));\n  }\n}\n\nexport {\n  memo,\n}\n", "import { last, flat_map } from './list.js';\n\nimport { range } from './index.js';\nimport { memo } from './memo.js';\nimport { by_charcode } from './transform.js';\n\nfunction Type(type, value) {\n  return { type, value };\n}\n\nfunction get_tokens(input) {\n  let expr = String(input);\n  let tokens = [], stack = [];\n  if (!expr.startsWith('[') || !expr.endsWith(']')) {\n    return tokens;\n  }\n\n  for (let i = 1; i < expr.length - 1; ++i) {\n    let c = expr[i];\n    if (c == '-' && expr[i - 1] == '-') {\n      continue;\n    }\n    if (c == '-') {\n      stack.push(c);\n      continue;\n    }\n    if (last(stack) == '-') {\n      stack.pop();\n      let from = stack.pop();\n      tokens.push(from\n        ? Type('range', [ from, c ])\n        : Type('char', c)\n      );\n      continue;\n    }\n    if (stack.length) {\n      tokens.push(Type('char', stack.pop()));\n    }\n    stack.push(c);\n  }\n  if (stack.length) {\n    tokens.push(Type('char', stack.pop()));\n  }\n  return tokens;\n}\n\nconst build_range = memo('build_range', (input) => {\n  let tokens = get_tokens(input);\n  return flat_map(tokens, ({ type, value }) => {\n    if (type == 'char') return value;\n    let [ from, to ] = value;\n    let reverse = false;\n    if (from > to) {\n      [from, to] = [ to, from ];\n      reverse = true;\n    }\n    let result = by_charcode(range)(from, to);\n    if (reverse) result.reverse();\n    return result;\n  });\n});\n\nfunction expand(fn) {\n  return (...args) => fn(...flat_map(args, n =>\n    String(n).startsWith('[') ? build_range(n) : n\n  ));\n}\n\nexport {\n  expand,\n}\n", "class Node {\n  constructor(data) {\n    this.prev = this.next = null;\n    this.data = data;\n  }\n}\n\nexport default class Stack {\n  constructor(limit = 20) {\n    this._limit = limit;\n    this._size = 0;\n  }\n  push(data) {\n    if (this._size >= this._limit) {\n      this.root = this.root.next;\n      this.root.prev = null;\n    }\n    let node = new Node(data);\n    if (!this.root) {\n      this.root = this.tail = node;\n    } else {\n      node.prev = this.tail;\n      this.tail.next = node;\n      this.tail = node;\n    }\n    this._size++;\n  }\n  last(n = 1) {\n    let node = this.tail;\n    while (--n) {\n      if (!node.prev) break;\n      node = node.prev;\n    }\n    return node.data;\n  }\n}\n", "/**\n * Improved noise by Ken Perlin\n * Translated from: https://mrl.nyu.edu/~perlin/noise/\n */\n\nimport { lerp } from './index.js';\nimport { duplicate } from './list.js';\n\nexport default class Perlin {\n  constructor(shuffle) {\n    this.p = duplicate(shuffle([\n      151,160,137,91,90,15,\n      131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,\n      190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,\n      88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,\n      77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,\n      102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,\n      135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,\n      5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,\n      223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,\n      129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,\n      251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,\n      49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n      138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180\n    ]));\n  }\n\n  // Convert LO 4 bits of hash code into 12 gradient directions.\n  grad(hash, x, y, z) {\n    let h = hash & 15,\n        u = h < 8 ? x : y,\n        v = h < 4 ? y : h == 12 || h == 14 ? x : z;\n    return ((h&1) == 0 ? u : -u) + ((h&2) == 0 ? v : -v);\n  }\n\n  noise(x, y, z) {\n    let { p, grad } = this;\n    // Find unit cube that contains point.\n    let [X, Y, Z] = [x, y, z].map(n => Math.floor(n) & 255);\n    // Find relative x, y, z of point in cube.\n    [x, y, z] = [x, y, z].map(n => n - Math.floor(n));\n    // Compute fade curves for each of x, y, z.\n    let [u, v, w] = [x, y, z].map(n => n * n * n * (n * (n * 6 - 15) + 10));\n    // hash coordinates of the 8 cube corners.\n    let A = p[X  ]+Y, AA = p[A]+Z, AB = p[A+1]+Z,\n        B = p[X+1]+Y, BA = p[B]+Z, BB = p[B+1]+Z;\n    // And add blended results from 8 corners of cube.\n    return lerp(w, lerp(v, lerp(u, grad(p[AA  ], x  , y  , z   ),\n                                   grad(p[BA  ], x-1, y  , z   )),\n                           lerp(u, grad(p[AB  ], x  , y-1, z   ),\n                                   grad(p[BB  ], x-1, y-1, z   ))),\n                   lerp(v, lerp(u, grad(p[AA+1], x  , y  , z-1 ),\n                                   grad(p[BA+1], x-1, y  , z-1 )),\n                           lerp(u, grad(p[AB+1], x  , y-1, z-1 ),\n                                   grad(p[BB+1], x-1, y-1, z-1 ))));\n  }\n}\n", "import parse_value_group from '../parser/parse-value-group.js';\n\nfunction get_named_arguments(args, names) {\n  let result = {};\n  let order = true;\n  for (let i = 0; i < args.length; ++i) {\n    let arg = args[i];\n    let arg_name = names[i];\n    if (/=/.test(arg)) {\n      let [name, value] = parse_value_group(arg, { symbol: '=', noSpace: true });\n      if (value !== undefined) {\n        if (names.includes(name)) {\n          result[name] = value;\n        }\n        // ignore the rest unnamed arguments\n        order = false;\n      } else {\n        result[arg_name] = arg;\n      }\n    } else if (order) {\n      result[arg_name] = arg;\n    }\n  }\n  return result;\n}\n\nexport default get_named_arguments;\n", "import { scan, iterator } from './tokenizer.js';\n\nfunction parse(input) {\n  let iter = iterator(scan(input));\n  let commands = {};\n  let tokens = [];\n  let name;\n  let negative = false;\n  while (iter.next()) {\n    let { prev, curr, next } = iter.get();\n    if (curr.isSymbol(':') && !name) {\n      name = joinTokens(tokens);\n      tokens = [];\n    } else if (curr.isSymbol(';') && name) {\n      commands[name] = transformNegative(name, joinTokens(tokens), negative);\n      tokens = [];\n      name = null;\n      negative = false;\n    } else if (!curr.isSymbol(';')) {\n      let prevMinus = prev && prev.isSymbol('-');\n      let nextMinus = next && next.isSymbol('-');\n      let currMinus = curr.isSymbol('-');\n      if (!name && !tokens.length && currMinus && !prevMinus && !nextMinus) {\n        if (next && next.isSymbol(':')) {\n          tokens.push(curr);\n        } else {\n          negative = true;\n        }\n      } else {\n        tokens.push(curr);\n      }\n    }\n  }\n  if (tokens.length && name) {\n    commands[name] = transformNegative(name, joinTokens(tokens), negative);\n  }\n  return commands;\n}\n\nfunction transformNegative(name, value, negative) {\n  let excludes = ['fill-rule', 'fill'];\n  if (excludes.includes(name)) {\n    return value;\n  }\n  return negative ? `-1 * (${ value })` : value;\n}\n\nfunction joinTokens(tokens) {\n  return tokens.map(n => n.value).join('');\n}\n\nexport default parse;\n", "import { iterator, scan } from './tokenizer.js';\n\nconst keywords = ['auto', 'reverse'];\nconst units = ['deg', 'rad', 'grad', 'turn'];\n\nfunction parse(input) {\n  let iter = iterator(scan(input));\n  let matched = false;\n  let unit = '';\n  let ret = {\n    direction: '',\n    angle: '',\n  };\n  while (iter.next()) {\n    let { prev, curr, next } = iter.get();\n    if (curr.isWord() && keywords.includes(curr.value)) {\n      ret.direction = curr.value;\n      matched = true;\n    }\n    else if (curr.isNumber()) {\n      ret.angle = Number(curr.value);\n      matched = true;\n    }\n    else if (curr.isWord() && prev && prev.isNumber() && units.includes(curr.value)) {\n      unit = curr.value;\n    }\n    else if (curr.isSpace() && ret.direction !== '' && ret.angle !== '') {\n      break;\n    }\n  }\n  if (!matched) {\n    ret.direction = 'auto';\n  }\n  return normalizeAngle(ret, unit);\n}\n\nfunction normalizeAngle(input, unit) {\n  let { angle } = input;\n  if (angle === '') {\n    angle = 0;\n  }\n  if (unit === 'rad') {\n    angle /= (Math.PI / 180);\n  }\n  if (unit === 'grad') {\n    angle *= .9;\n  }\n  if (unit === 'turn') {\n    angle *= 360;\n  }\n  return Object.assign({}, input, { angle });\n}\n\nexport default parse;\n", "import { clamp, is_empty, make_tag_function } from '../utils/index.js';\nimport parse_shape_commands from '../parser/parse-shape-commands.js';\nimport parse_value_group from '../parser/parse-value-group.js';\nimport parse_direction from '../parser/parse-direction.js';\nimport parse_compound_value from '../parser/parse-compound-value.js';\nimport calc from '../calc.js';\n\nconst { cos, sin, abs, atan2, PI } = Math;\n\nconst _ = make_tag_function(c => {\n  return create_shape_points(\n    parse_shape_commands(c), {min: 3, max: 3600}\n  );\n});\n\nconst shapes = {\n  circle: () => _`\n    split: 180;\n    scale: .99\n  `,\n\n  triangle: () => _`\n    rotate: 30;\n    scale: 1.1;\n    move: 0 .2\n  `,\n\n  pentagon: () => _`\n    split: 5;\n    rotate: 54\n  `,\n\n  hexagon: () => _`\n    split: 6;\n    rotate: 30;\n    scale: .98\n  `,\n\n  octagon: () => _`\n    split: 8;\n    rotat: 22.5;\n    scale: .99\n  `,\n\n  star: () => _`\n    split: 10;\n    r: cos(5t);\n    rotate: -18;\n    scale: .99\n  `,\n\n  infinity: () => _`\n    split: 180;\n    scale: .99;\n    x: cos(t)*.99 / (sin(t)^2 + 1);\n    y: x * sin(t)\n  `,\n\n  heart: () => _`\n    split: 180;\n    rotate: 180;\n    a: cos(t)*13/18 - cos(2t)*5/18;\n    b: cos(3t)/18 + cos(4t)/18;\n    x: (.75 * sin(t)^3) * 1.2;\n    y: (a - b + .2) * -1.1\n  `,\n\n  bean: () => _`\n    split: 180;\n    r: sin(t)^3 + cos(t)^3;\n    move: -.35 .35;\n  `,\n\n  bicorn: () => _`\n    split: 180;\n    x: cos(t);\n    y: sin(t)^2 / (2 + sin(t)) - .5\n  `,\n\n  drop: () => _`\n    split: 180;\n    rotate: 90;\n    scale: .95;\n    x: sin(t);\n    y: (1 + sin(t)) * cos(t) / 1.6\n  `,\n\n  fish: () => _`\n    split: 240;\n    x: cos(t) - sin(t)^2 / sqrt(2) - .04;\n    y: sin(2t)/2\n  `,\n\n  whale: () => _`\n    split: 240;\n    rotate: 180;\n    R: 3.4 * (sin(t)^2 - .5) * cos(t);\n    x: cos(t) * R + .75;\n    y: sin(t) * R * 1.2\n  `,\n\n  windmill:  () => _`\n    split: 18;\n    R: seq(.618, 1, 0);\n    T: seq(t-.55, t, t);\n    x: R * cos(T);\n    y: R * sin(T)\n  `,\n\n  vase: () => _`\n    split: 240;\n    scale: .3;\n    x: sin(4t) + sin(t) * 1.4;\n    y: cos(t) + cos(t) * 4.8 + .3\n  `,\n\n  clover: (k = 3) => {\n    k = clamp(k, 3, 5);\n    if (k == 4) k = 2;\n    return _`\n      split: 240;\n      r: cos(${k}t);\n      scale: .98\n    `;\n  },\n\n  hypocycloid: (k = 3) => {\n    k = clamp(k, 3, 5);\n    let scale = [0, 0, 0, .34, .25, .19][k];\n    return _`\n      split: 240;\n      scale: ${scale};\n      k: ${k};\n      x: (k-1)*cos(t) + cos((k-1)*t);\n      y: (k-1)*sin(t) - sin((k-1)*t)\n    `;\n  },\n\n  bud: (k = 3) => {\n    k = clamp(k, 3, 10);\n    return _`\n      split: 240;\n      scale: .8;\n      r: 1 + .2 * cos(${k}t)\n    `;\n  },\n};\n\nclass Point {\n  constructor(x, y, angle) {\n    this.x = x;\n    this.y = y;\n    this.extra = angle;\n  }\n  valueOf() {\n    return this.x + ' ' + this.y;\n  }\n  toString() {\n    return this.valueOf();\n  }\n}\n\nfunction create_polygon_points(option, fn) {\n  if (typeof arguments[0] == 'function') {\n    fn = option;\n    option = {};\n  }\n\n  if (!fn) {\n    fn = t => [ cos(t), sin(t) ];\n  }\n\n  let split = option.split || 180;\n  let turn = option.turn || 1;\n  let frame = option.frame;\n  let fill = option['fill'] || option['fill-rule'];\n  let direction = parse_direction(option['direction'] || option['dir'] || '');\n  let unit = option.unit;\n\n  let rad = (PI * 2) * turn / split;\n  let points = [];\n  let first_point, first_point2;\n\n  let factor = (option.scale === undefined) ? 1 : option.scale;\n  let add = ([x1, y1, dx = 0, dy = 0]) => {\n    if (x1 == 'evenodd' || x1 == 'nonzero') {\n      return points.push(new Point(x1, '', ''));\n    }\n    let [x, y] = scale(x1, -y1, factor);\n    let [dx1, dy2] = scale(dx, -dy, factor);\n    let angle = calc_angle(x, y, dx1, dy2, direction);\n    if (unit !== undefined && unit !== '%') {\n      if (unit !== 'none') {\n        x += unit;\n        y += unit;\n      }\n    } else {\n      x = (x + 1) * 50 + '%';\n      y = (y + 1) * 50 + '%';\n    }\n    points.push(new Point(x, y, angle));\n  }\n\n  if (fill == 'nonzero' || fill == 'evenodd') {\n    add([fill, '', '']);\n  }\n\n  for (let i = 0; i < split; ++i) {\n    let t = rad * i;\n    let point = fn(t, i);\n    if (!i) first_point = point;\n    add(point);\n  }\n\n  if (frame !== undefined) {\n    add(first_point);\n    let w = frame / 100;\n    if (turn > 1) w *= 2;\n    if (w == 0) w = .002;\n    for (let i = 0; i < split; ++i) {\n      let t = -rad * i;\n      let [x, y, dx = 0, dy = 0] = fn(t, i);\n      let theta = atan2(y + dy, x - dx);\n      let point = [\n        x - w * cos(theta),\n        y - w * sin(theta)\n      ];\n      if (!i) first_point2 = point;\n      add(point);\n    }\n    add(first_point2);\n    add(first_point);\n  }\n\n  return points;\n}\n\nfunction calc_angle(x, y, dx, dy, option) {\n  let base = atan2(y + dy, x - dx) * 180 / PI;\n  if (option.direction === 'reverse') {\n    base -= 180;\n  }\n  if (!option.direction) {\n    base = 90;\n  }\n  if (option.angle) {\n    base += option.angle;\n  }\n  return base;\n}\n\nfunction rotate(x, y, deg) {\n  let rad = -PI / 180 * deg;\n  return [\n    x * cos(rad) - y * sin(rad),\n    y * cos(rad) + x * sin(rad)\n  ];\n}\n\nfunction translate(x, y, offset) {\n  let [dx, dy = dx] = parse_value_group(offset).map(Number);\n  return [\n    x + (dx || 0),\n    y - (dy || 0),\n    dx,\n    dy\n  ];\n}\n\nfunction scale(x, y, factor) {\n  let [fx, fy = fx] = parse_value_group(factor).map(Number);\n  return [\n    x * fx,\n    y * fy\n  ];\n}\n\nfunction create_shape_points(props, {min, max}) {\n  let split = clamp(parseInt(props.vertices || props.points || props.split) || 0, min, max);\n  let px = is_empty(props.x) ? 'cos(t)' : props.x;\n  let py = is_empty(props.y) ? 'sin(t)' : props.y;\n  let pr = is_empty(props.r) ? ''       : props.r;\n\n  let { unit, value } = parse_compound_value(pr);\n  if (unit && !props[unit] && unit !== 't') {\n    if (is_empty(props.unit)) {\n      props.unit = unit;\n    }\n    pr = props.r = value;\n  }\n\n  if (props.degree) {\n    props.rotate = props.degree;\n  }\n\n  if (props.origin) {\n    props.move = props.origin;\n  }\n\n  let option = Object.assign({}, props, { split });\n\n  return create_polygon_points(option, (t, i) => {\n    let context = Object.assign({}, props, {\n      't': t,\n      'θ': t,\n      'i': (i + 1),\n      seq(...list) {\n        if (!list.length) return '';\n        return list[i % list.length];\n      },\n      range(a, b = 0) {\n        a = Number(a) || 0;\n        b = Number(b) || 0;\n        if (a > b) [a, b] = [b, a];\n        let step = abs(b - a) / (split - 1);\n        return a + step * i;\n      }\n    });\n    let x = calc(px, context);\n    let y = calc(py, context);\n    let dx = 0;\n    let dy = 0;\n    if (pr) {\n      let r = calc(pr, context);\n      if (r == 0) {\n        r = .00001;\n      }\n      x = r * cos(t);\n      y = r * sin(t);\n    }\n    if (props.rotate) {\n      [x, y] = rotate(x, y, Number(props.rotate) || 0);\n    }\n    if (props.move) {\n      [x, y, dx, dy] = translate(x, y, props.move);\n    }\n    return [x, y, dx, dy];\n  });\n}\n\nexport {\n  create_polygon_points,\n  create_shape_points,\n  shapes,\n}\n", "import { scan, iterator } from './tokenizer.js';\n\nconst commands = 'MmLlHhVvCcSsQqTtAaZz';\nconst relatives = 'mlhvcsqtaz';\n\nfunction parse(input) {\n  let iter = iterator(scan(input));\n  let temp = {};\n  let result = {\n    commands: [],\n    valid: true\n  };\n  while (iter.next()) {\n    let { curr } = iter.get();\n    if (curr.isSpace() || curr.isSymbol(',')) {\n      continue;\n    }\n    if (curr.isWord()) {\n      if (temp.name) {\n        result.commands.push(temp);\n        temp = {};\n      }\n      temp.name = curr.value;\n      temp.value = [];\n      if (!commands.includes(curr.value)) {\n        temp.type = 'unknown';\n        result.valid = false;\n      } else if (relatives.includes(curr.value)) {\n        temp.type = 'relative';\n      } else {\n        temp.type = 'absolute';\n      }\n    } else if (temp.value) {\n      let value = curr.value;\n      if (curr.isNumber()) {\n        value = Number(curr.value);\n      }\n      temp.value.push(value);\n    } else if (!temp.name) {\n      result.valid = false;\n    }\n  }\n  if (temp.name) {\n    result.commands.push(temp);\n  }\n  return result;\n}\n\nexport default parse;\n", "const uniform_time = {\n  'name': 'cssd-uniform-time',\n  'animation-name': 'cssd-uniform-time-animation',\n  'animation-duration': 31536000000, /* one year in ms */\n  'animation-iteration-count': 'infinite',\n  'animation-delay': '0s',\n  'animation-direction': 'normal',\n  'animation-fill-mode': 'none',\n  'animation-play-state': 'running',\n  'animation-timing-function': 'linear',\n};\n\nuniform_time['animation'] = `\n  ${ uniform_time['animation-duration'] }ms\n  ${ uniform_time['animation-timing-function'] }\n  ${ uniform_time['animation-delay'] }\n  ${ uniform_time['animation-iteration-count'] }\n  ${ uniform_time['animation-name'] }\n`;\n\nconst uniform_mousex = {\n  name: 'cssd-uniform-mousex',\n};\n\nconst uniform_mousey = {\n  name: 'cssd-uniform-mousey',\n};\n\nconst uniform_width = {\n  name: 'cssd-uniform-width',\n};\n\nconst uniform_height = {\n  name: 'cssd-uniform-height',\n};\n\nexport {\n  uniform_time,\n  uniform_mousex,\n  uniform_mousey,\n  uniform_width,\n  uniform_height,\n}\n", "import { create_svg_url, normalize_svg } from './utils/svg.js';\nimport { generate_svg } from './generator/svg.js';\n\nimport { cell_id, is_letter, is_nil, is_empty, add_alias, unique_id, lerp } from './utils/index.js';\nimport { lazy, clamp, sequence, get_value } from './utils/index.js';\nimport { by_unit, by_charcode } from './utils/transform.js';\nimport { last } from './utils/list.js';\n\nimport calc from './calc.js';\nimport { memo } from './utils/memo.js';\nimport { expand } from './utils/expand.js';\nimport Stack from './utils/stack.js';\nimport Noise from './utils/noise.js';\nimport get_named_arguments from './utils/get-named-arguments.js';\n\nimport { shapes, create_shape_points } from './generator/shapes.js';\nimport parse_value_group from './parser/parse-value-group.js';\nimport parse_shape_commands from './parser/parse-shape-commands.js';\nimport parse_svg from './parser/parse-svg.js';\nimport parse_svg_path from './parser/parse-svg-path.js';\n\nimport * as Uniforms from './uniforms.js';\n\nfunction make_sequence(c) {\n  return lazy((_, n, ...actions) => {\n    if (!actions || !n) return '';\n    let count = get_value(n());\n    let evaluated = count;\n    if (/\\D/.test(count) && !/\\d+[x-]\\d+/.test(count)) {\n      evaluated = calc(count);\n      if (evaluated === 0) {\n        evaluated = count;\n      }\n    }\n    let signature = Math.random();\n    return sequence(\n      evaluated,\n      (...args) => {\n        return actions.map(action => {\n          return get_value(action(...args, signature))\n        }).join(',');\n      }\n    ).join(c);\n  });\n}\n\nfunction push_stack(context, name, value) {\n  if (!context[name]) context[name] = new Stack();\n  context[name].push(value);\n  return value;\n}\n\nfunction flip_value(num) {\n  return -1 * num;\n}\n\nfunction map2d(value, min, max, amp = 1) {\n  let dimention = 2;\n  let v = Math.sqrt(dimention / 4) * amp;\n  let [ma, mb] = [-v, v];\n  return lerp((value - ma) / (mb - ma), min * amp, max * amp);\n}\n\nfunction calc_with(base) {\n  return v => {\n    if (is_empty(v) || is_empty(base)) {\n      return base;\n    }\n    if (/^[+*-\\/%][.\\d\\s]/.test(v)) {\n      let op = v[0];\n      let num = Number(v.substr(1).trim()) || 0;\n      switch (op) {\n        case '+': return base + num;\n        case '-': return base - num;\n        case '*': return base * num;\n        case '/': return base / num;\n        case '%': return base % num;\n      }\n    }\n    else if (/[+*-\\/%]$/.test(v)) {\n      let op = v.substr(-1);\n      let num = Number(v.substr(0, v.length - 1).trim()) || 0;\n      switch (op) {\n        case '+': return num + base;\n        case '-': return num - base;\n        case '*': return num * base;\n        case '/': return num / base;\n        case '%': return num % base;\n      }\n    }\n    return base + (Number(v) || 0);\n  }\n}\n\nconst Expose = add_alias({\n\n  i({ count }) {\n    return calc_with(count);\n  },\n\n  y({ y }) {\n    return calc_with(y);\n  },\n\n  x({ x }) {\n    return calc_with(x);\n  },\n\n  z({ z }) {\n    return calc_with(z);\n  },\n\n  I({ grid }) {\n    return calc_with(grid.count);\n  },\n\n  Y({ grid }) {\n    return calc_with(grid.y);\n  },\n\n  X({ grid }) {\n    return calc_with(grid.x);\n  },\n\n  Z({ grid }) {\n    return calc_with(grid.z);\n  },\n\n  id({ x, y, z }) {\n    return _ => cell_id(x, y, z);\n  },\n\n  n({ extra }) {\n    let lastExtra = last(extra);\n    return lastExtra ? calc_with(lastExtra[0]) : '@n';\n  },\n\n  nx({ extra }) {\n    let lastExtra = last(extra);\n    return lastExtra ? calc_with(lastExtra[1]) : '@nx';\n  },\n\n  ny({ extra }) {\n    let lastExtra = last(extra);\n    return lastExtra ? calc_with(lastExtra[2]) : '@ny';\n  },\n\n  N({ extra }) {\n    let lastExtra = last(extra);\n    return lastExtra ? calc_with(lastExtra[3]) : '@N';\n  },\n\n  m: make_sequence(','),\n\n  M: make_sequence(' '),\n\n  µ: make_sequence(''),\n\n  p({ context, pick }) {\n    return expand((...args) => {\n      if (!args.length) {\n        args = context.last_pick_args || [];\n      }\n      let picked = pick(args);\n      context.last_pick_args = args;\n      return push_stack(context, 'last_pick', picked);\n    });\n  },\n\n  P({ context, pick, position }) {\n    let counter = 'P-counter' + position;\n    return expand((...args) => {\n      let normal = true;\n      if (!args.length) {\n        args = context.last_pick_args || [];\n        normal = false;\n      }\n      let stack = context.last_pick;\n      let last = stack ? stack.last(1) : '';\n      if (normal) {\n        if (!context[counter]) {\n          context[counter] = {};\n        }\n        last = context[counter].last_pick;\n      }\n      if (args.length > 1) {\n        let i = args.findIndex(n => n === last);\n        if (i !== -1) {\n          args.splice(i, 1);\n        }\n      }\n      let picked = pick(args);\n      context.last_pick_args = args;\n      if (normal) {\n        context[counter].last_pick = picked;\n      }\n      return push_stack(context, 'last_pick', picked);\n    });\n  },\n\n  pl({ context, extra, position }) {\n    let lastExtra = last(extra);\n    let sig = lastExtra ? last(lastExtra) : '';\n    let counter = 'pl-counter' + position + sig;\n    return expand((...args) => {\n      if (!context[counter]) context[counter] = 0;\n      context[counter] += 1;\n      let max = args.length;\n      let idx = lastExtra && lastExtra[6];\n      if (is_nil(idx)) idx = context[counter];\n      let pos = (idx - 1) % max;\n      let value = args[pos];\n      return push_stack(context, 'last_pick', value);\n    });\n  },\n\n  pr({ context, extra, position }) {\n    let lastExtra = last(extra);\n    let sig = lastExtra ? last(lastExtra) : '';\n    let counter = 'pr-counter' + position + sig;\n    return expand((...args) => {\n      if (!context[counter]) context[counter] = 0;\n      context[counter] += 1;\n      let max = args.length;\n      let idx = lastExtra && lastExtra[6];\n      if (is_nil(idx)) idx = context[counter];\n      let pos = (idx - 1) % max;\n      let value = args[max - pos - 1];\n      return push_stack(context, 'last_pick', value);\n    });\n  },\n\n  pd({ context, extra, position, shuffle }) {\n    let lastExtra = last(extra);\n    let sig = lastExtra ? last(lastExtra) : '';\n    let counter = 'pd-counter' + position  + sig;\n    let values = 'pd-values' + position + sig;;\n    return expand((...args) => {\n      if (!context[counter]) context[counter] = 0;\n      context[counter] += 1;\n      if (!context[values]) {\n        context[values] = shuffle(args || []);\n      }\n      let max = args.length;\n      let idx = lastExtra && lastExtra[6];\n      if (is_nil(idx)) idx = context[counter];\n      let pos = (idx - 1) % max;\n      let value = context[values][pos];\n      return push_stack(context, 'last_pick', value);\n    });\n  },\n\n  lp({ context }) {\n    return (n = 1) => {\n      let stack = context.last_pick;\n      return stack ? stack.last(n) : '';\n    };\n  },\n\n  r({ context, rand }) {\n    return (...args) => {\n      let transform = args.every(is_letter)\n        ? by_charcode\n        : by_unit;\n      let value = transform(rand)(...args);\n      return push_stack(context, 'last_rand', value);\n    };\n  },\n\n  rn({ x, y, context, position, grid, extra, shuffle }) {\n    let counter = 'noise-2d' + position;\n    let [ni, nx, ny, nm, NX, NY] = last(extra) || [];\n    let isSeqContext = (ni && nm);\n    return (...args) => {\n      let {from = 0, to = from, frequency = 1, amplitude = 1} = get_named_arguments(args, [\n        'from', 'to', 'frequency', 'amplitude'\n      ]);\n\n      if (args.length == 1) {\n        [from, to] = [0, from];\n      }\n      if (!context[counter]) {\n        context[counter] = new Noise(shuffle);\n      }\n      frequency = clamp(frequency, 0, Infinity);\n      amplitude = clamp(amplitude, 0, Infinity);\n      let transform = [from, to].every(is_letter) ? by_charcode : by_unit;\n      let t = isSeqContext\n        ? context[counter].noise((nx - 1)/NX * frequency, (ny - 1)/NY * frequency, 0)\n        : context[counter].noise((x - 1)/grid.x * frequency, (y - 1)/grid.y * frequency, 0);\n      let fn = transform((from, to) => map2d(t * amplitude, from, to, amplitude));\n      let value = fn(from, to);\n      return push_stack(context, 'last_rand', value);\n    };\n  },\n\n  lr({ context }) {\n    return (n = 1) => {\n      let stack = context.last_rand;\n      return stack ? stack.last(n) : '';\n    };\n  },\n\n  noise({ context, grid, position, shuffle, ...rest }) {\n    let vars = {\n      i: rest.count, I: grid.count,\n      x: rest.x, X: grid.x,\n      y: rest.y, Y: grid.y,\n      z: rest.z, Z: grid.z,\n    };\n    return (x, y, z = 0) => {\n      let counter = 'raw-noise-2d' + position;\n      if (!context[counter]) {\n        context[counter] = new Noise(shuffle);\n      }\n      return context[counter].noise(\n        calc(x, vars),\n        calc(y, vars),\n        calc(z, vars)\n      );\n    };\n  },\n\n  stripe() {\n    return (...input) => {\n      let colors = input.map(get_value);\n      let max = colors.length;\n      let default_count = 0;\n      let custom_sizes = [];\n      let prev;\n      if (!max) {\n        return '';\n      }\n      colors.forEach(step => {\n        let [_, size] = parse_value_group(step);\n        if (size !== undefined) custom_sizes.push(size);\n        else default_count += 1;\n      });\n      let default_size = custom_sizes.length\n        ? `(100% - ${custom_sizes.join(' - ')}) / ${default_count}`\n        : `100% / ${max}`\n      return colors.map((step, i) => {\n        if (custom_sizes.length) {\n          let [color, size] = parse_value_group(step);\n          let prefix = prev ? (prev + ' + ') : '';\n          prev = prefix + (size !== undefined ? size : default_size);\n          return `${color} 0 calc(${ prev })`\n        }\n        return `${step} 0 ${100 / max * (i + 1)}%`\n      })\n      .join(',');\n    }\n  },\n\n  calc() {\n    return value => calc(get_value(value));\n  },\n\n  hex() {\n    return value => parseInt(get_value(value)).toString(16);\n  },\n\n  svg: lazy((_, ...args) => {\n    let value = args.map(input => get_value(input())).join(',');\n    if (!value.startsWith('<')) {\n      let parsed = parse_svg(value);\n      value = generate_svg(parsed);\n    }\n    let svg = normalize_svg(value);\n    return create_svg_url(svg);\n  }),\n\n  Svg: lazy((_, ...args) => {\n    let value = args.map(input => get_value(input())).join(',');\n    if (!value.startsWith('<')) {\n      let parsed = parse_svg(value);\n      value = generate_svg(parsed);\n    }\n    return normalize_svg(value);\n  }),\n\n  filter: lazy((upstream, ...args) => {\n    let values = args.map(input => get_value(input()));\n    let value = values.join(',');\n    let id = unique_id('filter-');\n    // shorthand\n    if (values.every(n => /^[\\d.]/.test(n) || (/^(\\w+)/.test(n) && !/[{}<>]/.test(n)))) {\n      let { frequency, scale = 1, octave, seed = upstream.seed, blur, erode, dilate } = get_named_arguments(values, [\n        'frequency', 'scale', 'octave', 'seed', 'blur', 'erode', 'dilate'\n      ]);\n      value = `\n        x: -20%;\n        y: -20%;\n        width: 140%;\n        height: 140%;\n      `;\n      if (!is_nil(dilate)) {\n        value += `\n          feMorphology {\n            operator: dilate;\n            radius: ${dilate};\n          }\n        `\n      }\n      if (!is_nil(erode)) {\n        value += `\n          feMorphology {\n            operator: erode;\n            radius: ${erode};\n          }\n        `\n      }\n      if (!is_nil(blur)) {\n        value += `\n          feGaussianBlur {\n            stdDeviation: ${blur};\n          }\n        `\n      }\n      if (!is_nil(frequency)) {\n        let [bx, by = bx] = parse_value_group(frequency);\n        octave = octave ? `numOctaves: ${octave};` : '';\n        value += `\n          feTurbulence {\n            type: fractalNoise;\n            baseFrequency: ${bx} ${by};\n            seed: ${seed};\n            ${octave}\n          }\n          feDisplacementMap {\n            in: SourceGraphic;\n            scale: ${scale};\n          }\n        `\n      }\n    }\n    // new svg syntax\n    if (!value.startsWith('<')) {\n      let parsed = parse_svg(value, {\n        type: 'block',\n        name: 'filter'\n      });\n      value = generate_svg(parsed);\n    }\n    let svg = normalize_svg(value).replace(\n      /<filter([\\s>])/,\n      `<filter id=\"${ id }\"$1`\n    );\n    return create_svg_url(svg, id);\n  }),\n\n  'svg-pattern': lazy((_, ...args) => {\n    let value = args.map(input => get_value(input())).join(',');\n    let parsed = parse_svg(`\n      viewBox: 0 0 1 1;\n      preserveAspectRatio: xMidYMid slice;\n      rect {\n        width, height: 100%;\n        fill: defs pattern { ${ value } }\n      }\n    `);\n    let svg = generate_svg(parsed);\n    return create_svg_url(svg);\n  }),\n\n  var() {\n    return value => `var(${ get_value(value) })`;\n  },\n\n  ut() {\n    return value => `var(--${ Uniforms.uniform_time.name })`;\n  },\n\n  uw() {\n    return value => `var(--${ Uniforms.uniform_width.name })`;\n  },\n\n  uh() {\n    return value => `var(--${ Uniforms.uniform_height.name })`;\n  },\n\n  ux() {\n    return value => `var(--${ Uniforms.uniform_mousex.name })`;\n  },\n\n  uy() {\n    return value => `var(--${ Uniforms.uniform_mousey.name })`;\n  },\n\n  plot({ count, context, extra, position, grid }) {\n    let key = 'offset-points' + position;\n    let lastExtra = last(extra);\n    return commands => {\n      let [idx = count, _, __, max = grid.count] = lastExtra || [];\n      if (!context[key]) {\n        let config = parse_shape_commands(commands);\n        delete config['fill'];\n        delete config['fill-rule'];\n        delete config['frame'];\n        config.points = max;\n        context[key] = create_shape_points(config, {min: 1, max: 65536});\n      }\n      return context[key][idx - 1];\n    };\n  },\n\n  Plot({ count, context, extra, position, grid }) {\n    let key = 'Offset-points' + position;\n    let lastExtra = last(extra);\n    return commands => {\n      let [idx = count, _, __, max = grid.count] = lastExtra || [];\n      if (!context[key]) {\n        let config = parse_shape_commands(commands);\n        delete config['fill'];\n        delete config['fill-rule'];\n        delete config['frame'];\n        config.points = max;\n        config.unit = config.unit || 'none';\n        context[key] = create_shape_points(config, {min: 1, max: 65536});\n      }\n      return context[key][idx - 1];\n    };\n  },\n\n  shape() {\n    return memo('shape-function', (type = '', ...args) => {\n      type = String(type).trim();\n      let points = [];\n      if (type.length) {\n        if (typeof shapes[type] === 'function') {\n          points = shapes[type](args);\n        } else {\n          let commands = type;\n          let rest = args.join(',');\n          if (rest.length) {\n            commands = type + ',' + rest;\n          }\n          let config = parse_shape_commands(commands);\n          points = create_shape_points(config, {min: 3, max: 3600});\n        }\n      }\n      return `polygon(${points.join(',')})`;\n    });\n  },\n\n  doodle() {\n    return value => value;\n  },\n\n  shaders() {\n    return value => value;\n  },\n\n  canvas() {\n    return value => value;\n  },\n\n  pattern() {\n    return value => value;\n  },\n\n  invert() {\n    return commands => {\n      let parsed = parse_svg_path(commands);\n      if (!parsed.valid) return commands;\n      return parsed.commands.map(({ name, value }) => {\n        switch (name) {\n          case 'v': return 'h' + value.join(' ');\n          case 'V': return 'H' + value.join(' ');\n          case 'h': return 'v' + value.join(' ');\n          case 'H': return 'V' + value.join(' ');\n          default:  return name + value.join(' ');\n        }\n      }).join(' ');\n    };\n  },\n\n  flipH() {\n    return commands => {\n      let parsed = parse_svg_path(commands);\n      if (!parsed.valid) return commands;\n      return parsed.commands.map(({ name, value }) => {\n        switch (name) {\n          case 'h':\n          case 'H': return name + value.map(flip_value).join(' ');\n          default:  return name + value.join(' ');\n        }\n      }).join(' ');\n    };\n  },\n\n  flipV() {\n    return commands => {\n      let parsed = parse_svg_path(commands);\n      if (!parsed.valid) return commands;\n      return parsed.commands.map(({ name, value }) => {\n        switch (name) {\n          case 'v':\n          case 'V': return name + value.map(flip_value).join(' ');\n          default:  return name + value.join(' ');\n        }\n      }).join(' ');\n    };\n  },\n\n  flip(...args) {\n    let flipH = Expose.flipH(...args);\n    let flipV = Expose.flipV(...args);\n    return commands => {\n      return flipV(flipH(commands));\n    }\n  },\n\n  reverse() {\n    return (...args) => {\n      let commands = args.map(get_value);\n      let parsed = parse_svg_path(commands.join(','));\n      if (parsed.valid) {\n        let result = [];\n        for (let i = parsed.commands.length - 1; i >= 0; --i) {\n          let { name, value } = parsed.commands[i];\n          result.push(name + value.join(' '));\n        }\n        return result.join(' ');\n      }\n      return commands.reverse();\n    }\n  },\n\n  cycle() {\n    return (...args) => {\n      let list = [];\n      let separator;\n      if (args.length == 1) {\n        separator = ' ';;\n        list = parse_value_group(args[0], { symbol: separator });\n      } else {\n        separator = ',';\n        list = parse_value_group(args.map(get_value).join(separator), { symbol: separator});\n      }\n      let size = list.length - 1;\n      let result = [list.join(separator)];\n      // Just ignore the performance\n      for (let i = 0; i < size; ++i) {\n        let item = list.pop();\n        list.unshift(item);\n        result.push(list.join(separator));\n      }\n      return result;\n    }\n  },\n\n  mirror() {\n    return (...args) => {\n      for (let i = args.length - 1; i >= 0; --i) {\n        args.push(args[i]);\n      }\n      return args;\n    }\n  },\n\n  Mirror() {\n    return (...args) => {\n      for (let i = args.length - 2; i >= 0; --i) {\n        args.push(args[i]);\n      }\n      return args;\n    }\n  },\n\n  unicode() {\n    return (...args) => {\n      return args.map(code => String.fromCharCode(code));\n    }\n  },\n\n}, {\n\n  'index': 'i',\n  'col': 'x',\n  'row': 'y',\n  'depth': 'z',\n  'rand': 'r',\n  'pick': 'p',\n  'pn':   'pl',\n  'pnr':  'pr',\n\n  // error prone\n  'stripes': 'stripe',\n  'strip':   'stripe',\n  'patern':  'pattern',\n  'flipv': 'flipV',\n  'fliph': 'flipH',\n\n  // legacy names, keep them before 1.0\n  't': 'ut',\n  'svg-filter': 'filter',\n  'last-rand': 'lr',\n  'last-pick': 'lp',\n  'multiple': 'm',\n  'multi': 'm',\n  'rep': 'µ',\n  'repeat': 'µ',\n  'ms': 'M',\n  's':  'I',\n  'size': 'I',\n  'sx': 'X',\n  'size-x': 'X',\n  'size-col': 'X',\n  'max-col': 'X',\n  'sy': 'Y',\n  'size-y': 'Y',\n  'size-row': 'Y',\n  'max-row': 'Y',\n  'sz': 'Z',\n  'size-z': 'Z',\n  'size-depth': 'Z',\n  'pick-by-turn': 'pl',\n  'pick-n': 'pl',\n  'pick-d': 'pd',\n  'offset': 'plot',\n  'Offset': 'Plot',\n  'point': 'plot',\n  'Point': 'Plot',\n  'paint': 'canvas',\n});\n\nexport default Expose;\n", "const presets = {\n\n '4a0': [ 1682, 2378 ],\n '2a0': [ 1189, 1682 ],\n  a0:   [ 841, 1189 ],\n  a1:   [ 594, 841 ],\n  a2:   [ 420, 594 ],\n  a3:   [ 297, 420 ],\n  a4:   [ 210, 297 ],\n  a5:   [ 148, 210 ],\n  a6:   [ 105, 148 ],\n  a7:   [ 74, 105 ],\n  a8:   [ 52, 74 ],\n  a9:   [ 37, 52 ],\n  a10:  [ 26, 37 ],\n\n  b0:  [ 1000, 1414 ],\n  b1:  [ 707, 1000 ],\n  b2:  [ 500, 707 ],\n  b3:  [ 353, 500 ],\n  b4:  [ 250, 353 ],\n  b5:  [ 176, 250 ],\n  b6:  [ 125, 176 ],\n  b7:  [ 88, 125 ],\n  b8:  [ 62, 88 ],\n  b9:  [ 44, 62 ],\n  b10: [ 31, 44 ],\n  b11: [ 22, 32 ],\n  b12: [ 16, 22 ],\n\n  c0:  [ 917, 1297 ],\n  c1:  [ 648, 917 ],\n  c2:  [ 458, 648 ],\n  c3:  [ 324, 458 ],\n  c4:  [ 229, 324 ],\n  c5:  [ 162, 229 ],\n  c6:  [ 114, 162 ],\n  c7:  [ 81, 114 ],\n  c8:  [ 57, 81 ],\n  c9:  [ 40, 57 ],\n  c10: [ 28, 40 ],\n  c11: [ 22, 32 ],\n  c12: [ 16, 22 ],\n\n  d0: [ 764, 1064 ],\n  d1: [ 532, 760 ],\n  d2: [ 380, 528 ],\n  d3: [ 264, 376 ],\n  d4: [ 188, 260 ],\n  d5: [ 130, 184 ],\n  d6: [ 92, 126 ],\n\n  letter:   [ 216, 279 ],\n  postcard: [ 100, 148 ],\n  poster:   [ 390, 540 ],\n}\n\nconst modes = {\n  portrait: 'p',\n  pt: 'p',\n  p: 'p',\n\n  landscape: 'l',\n  ls: 'l',\n  l: 'l',\n}\n\nconst unit = 'mm';\n\nfunction get_preset(name, mode) {\n  name = String(name).toLowerCase();\n\n  // Default to landscape mode\n  let [h, w] = presets[name] || [];\n\n  if (modes[mode] == 'p') {\n    [w, h] = [h, w];\n  }\n\n  return [w, h].map(n => n + unit);\n}\n\nfunction is_preset(name) {\n  return !!presets[name];\n}\n\nexport {\n  get_preset,\n  is_preset\n}\n", "let all_props = [];\n\nfunction get_props(arg) {\n  if (!all_props.length) {\n    let props = new Set();\n    if (typeof document !== 'undefined') {\n      for (let n in document.head.style) {\n        if (!n.startsWith('-')) {\n          props.add(n.replace(/[A-Z]/g, '-$&').toLowerCase());\n        }\n      }\n    }\n    if (!props.has('grid-gap')) {\n      props.add('grid-gap');\n    }\n    all_props = Array.from(props);\n  }\n  return (arg instanceof RegExp)\n    ? all_props.filter(n => arg.test(n))\n    : all_props;\n}\n\nexport {\n  get_props,\n}\n", "import { get_props } from './get-props.js';\n\nfunction build_mapping(prefix) {\n  let reg = new RegExp(`\\\\-?${ prefix }\\\\-?`);\n  return get_props(reg)\n    .map(n => n.replace(reg, ''))\n    .reduce((obj, n) => { return obj[n] = n, obj }, {});\n}\n\nconst props_webkit_mapping = build_mapping('webkit');\nconst props_moz_mapping = build_mapping('moz');\n\nfunction prefixer(prop, rule) {\n  if (props_webkit_mapping[prop]) {\n    return `-webkit-${ rule } ${ rule }`;\n  }\n  else if (props_moz_mapping[prop]) {\n    return `-moz-${ rule } ${ rule }`;\n  }\n  return rule;\n}\n\nexport {\n  prefixer,\n}\n", "import parse_value_group from './parser/parse-value-group.js';\nimport parse_grid from './parser/parse-grid.js';\n\nimport { shapes } from './generator/shapes.js';\nimport { is_preset, get_preset } from './preset-size.js';\n\nimport { prefixer } from './utils/prefixer.js';\nimport { memo } from './utils/memo.js';\nimport { add_alias } from './utils/index.js';\n\nconst map_left_right = {\n  center: '50%',\n  left: '0%', right: '100%',\n  top: '50%', bottom: '50%'\n};\n\nconst map_top_bottom = {\n  center: '50%',\n  top: '0%', bottom: '100%',\n  left: '50%', right: '50%',\n};\n\nexport default add_alias({\n\n  size(value, { is_special_selector, grid }) {\n    let [w, h = w] = parse_value_group(value);\n    if (is_preset(w)) {\n      [w, h] = get_preset(w, h);\n    }\n    let styles = `\n      width: ${ w };\n      height: ${ h };\n    `;\n    if (is_special_selector) {\n      if (w === 'auto' || h === 'auto') {\n        styles += `aspect-ratio: ${ grid.ratio };`;\n      }\n    } else {\n      styles += `\n        --internal-cell-width: ${ w };\n        --internal-cell-height: ${ h };\n      `;\n    }\n    return styles;\n  },\n\n  place(value, { extra }) {\n    let [left, top = '50%'] = parse_value_group(value);\n    left = map_left_right[left] || left;\n    top = map_top_bottom[top] || top;\n    const cw = 'var(--internal-cell-width, 25%)';\n    const ch = 'var(--internal-cell-height, 25%)';\n    return `\n      position: absolute;\n      left: ${ left };\n      top: ${ top };\n      width: ${ cw };\n      height: ${ ch };\n      margin-left: calc(${ cw } / -2);\n      margin-top: calc(${ ch } / -2);\n      grid-area: unset;\n      --plot-angle: ${ extra || 0 };\n      rotate: ${ extra || 0 }deg;\n    `;\n  },\n\n  grid(value, options) {\n    let [grid, size] = parse_value_group(value, { symbol: '/', noSpace: true });\n    return {\n      grid: parse_grid(grid, options.max_grid),\n      size: size ? this.size(size, options) : ''\n    };\n  },\n\n  seed(value) {\n    return value;\n  },\n\n  shape: memo('shape-property', value => {\n    let [type, ...args] = parse_value_group(value);\n    if (typeof shapes[type] !== 'function') return '';\n    let prop = 'clip-path';\n    let points = shapes[type](...args);\n    let rules = `${ prop }: polygon(${points.join(',')});`;\n    return prefixer(prop, rules) + 'overflow: hidden;';\n  }),\n\n  use(rules) {\n    if (rules.length > 2) {\n      return rules;\n    }\n  },\n\n  content(value) {\n    return value;\n  },\n\n}, {\n  // legacy names.\n  'place-cell': 'place',\n  'offset': 'place',\n  'position': 'place',\n});\n", "import calc from './calc.js';\n\nconst literal = {\n  even: n => !(n % 2),\n  odd:  n => !!(n % 2),\n};\n\n/**\n * TODO: optimization\n */\nfunction nth(input, curr, max) {\n  for (let i = 0; i <= max; ++i) {\n    if (calc(input, { n: i }) == curr) {\n      return true;\n    }\n  }\n}\n\nexport default {\n\n  at({ x, y }) {\n    return (x1, y1) => (x == x1 && y == y1);\n  },\n\n  nth({ count, grid }) {\n    return (...exprs) => exprs.some(expr =>\n      literal[expr]\n        ? literal[expr](count)\n        : nth(expr, count, grid.count)\n    );\n  },\n\n  row({ y, grid }) {\n    return (...exprs) => exprs.some(expr =>\n      literal[expr]\n        ? literal[expr](y)\n        : nth(expr, y, grid.y)\n    );\n  },\n\n  col({ x, grid }) {\n    return (...exprs) => exprs.some(expr =>\n      literal[expr]\n        ? literal[expr](x)\n        : nth(expr, x, grid.x)\n    );\n  },\n\n  even({ count, grid, x, y }) {\n    return arg => literal.odd(x + y);\n  },\n\n  odd({ count, grid, x, y}) {\n    return arg => literal.even(x + y);\n  },\n\n  random({ random, count, x, y, grid }) {\n    return (ratio = .5) => {\n      if (/\\D/.test(ratio)) {\n        return random() < calc('(' + ratio + ')', {\n          x, X: grid.x,\n          y, Y: grid.y,\n          i: count, I: grid.count,\n          random,\n        });\n      }\n      return random() < ratio;\n    }\n  },\n\n  match({ count, grid, x, y, random }) {\n    return expr => {\n      return !!calc('(' + expr + ')', {\n        x, X: grid.x,\n        y, Y: grid.y,\n        i: count, I: grid.count,\n        random,\n      });\n    }\n  },\n\n}\n", "/*\nCopyright 2019 David Bau.\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nvar global = globalThis;\nvar math = Math;\nvar pool = [];\n\n//\n// The following constants are related to IEEE 754 limits.\n//\n\nvar width = 256,        // each RC4 output is 0 <= x < 256\n    chunks = 6,         // at least six RC4 outputs for each double\n    digits = 52,        // there are 52 significant digits in a double\n    rngname = 'random', // rngname: name for Math.random and Math.seedrandom\n    startdenom = math.pow(width, chunks),\n    significance = math.pow(2, digits),\n    overflow = significance * 2,\n    mask = width - 1,\n    nodecrypto;         // node.js crypto module, initialized at the bottom.\n\n//\n// seedrandom()\n// This is the seedrandom function described above.\n//\nfunction seedrandom(seed, options, callback) {\n  var key = [];\n  options = (options == true) ? { entropy: true } : (options || {});\n\n  // Flatten the seed string or build one from local entropy if needed.\n  var shortseed = mixkey(flatten(\n    options.entropy ? [seed, tostring(pool)] :\n    (seed == null) ? autoseed() : seed, 3), key);\n\n  // Use the seed to initialize an ARC4 generator.\n  var arc4 = new ARC4(key);\n\n  // This function returns a random double in [0, 1) that contains\n  // randomness in every bit of the mantissa of the IEEE 754 value.\n  var prng = function() {\n    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48\n        d = startdenom,                 //   and denominator d = 2 ^ 48.\n        x = 0;                          //   and no 'extra last byte'.\n    while (n < significance) {          // Fill up all significant digits by\n      n = (n + x) * width;              //   shifting numerator and\n      d *= width;                       //   denominator and generating a\n      x = arc4.g(1);                    //   new least-significant-byte.\n    }\n    while (n >= overflow) {             // To avoid rounding up, before adding\n      n /= 2;                           //   last byte, shift everything\n      d /= 2;                           //   right using integer math until\n      x >>>= 1;                         //   we have exactly the desired bits.\n    }\n    return (n + x) / d;                 // Form the number within [0, 1).\n  };\n\n  prng.int32 = function() { return arc4.g(4) | 0; }\n  prng.quick = function() { return arc4.g(4) / 0x100000000; }\n  prng.double = prng;\n\n  // Mix the randomness into accumulated entropy.\n  mixkey(tostring(arc4.S), pool);\n\n  // Calling convention: what to return as a function of prng, seed, is_math.\n  return (options.pass || callback ||\n      function(prng, seed, is_math_call, state) {\n        if (state) {\n          // Load the arc4 state from the given state if it has an S array.\n          if (state.S) { copy(state, arc4); }\n          // Only provide the .state method if requested via options.state.\n          prng.state = function() { return copy(arc4, {}); }\n        }\n\n        // If called as a method of Math (Math.seedrandom()), mutate\n        // Math.random because that is how seedrandom.js has worked since v1.0.\n        if (is_math_call) { math[rngname] = prng; return seed; }\n\n        // Otherwise, it is a newer calling convention, so return the\n        // prng directly.\n        else return prng;\n      })(\n  prng,\n  shortseed,\n  'global' in options ? options.global : (this == math),\n  options.state);\n}\n\n//\n// ARC4\n//\n// An ARC4 implementation.  The constructor takes a key in the form of\n// an array of at most (width) integers that should be 0 <= x < (width).\n//\n// The g(count) method returns a pseudorandom integer that concatenates\n// the next (count) outputs from ARC4.  Its return value is a number x\n// that is in the range 0 <= x < (width ^ count).\n//\nfunction ARC4(key) {\n  var t, keylen = key.length,\n      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];\n\n  // The empty key [] is treated as [0].\n  if (!keylen) { key = [keylen++]; }\n\n  // Set up S using the standard key scheduling algorithm.\n  while (i < width) {\n    s[i] = i++;\n  }\n  for (i = 0; i < width; i++) {\n    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];\n    s[j] = t;\n  }\n\n  // The \"g\" method returns the next (count) outputs as one number.\n  (me.g = function(count) {\n    // Using instance members instead of closure state nearly doubles speed.\n    var t, r = 0,\n        i = me.i, j = me.j, s = me.S;\n    while (count--) {\n      t = s[i = mask & (i + 1)];\n      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];\n    }\n    me.i = i; me.j = j;\n    return r;\n    // For robust unpredictability, the function call below automatically\n    // discards an initial batch of values.  This is called RC4-drop[256].\n    // See http://google.com/search?q=rsa+fluhrer+response&btnI\n  })(width);\n}\n\n//\n// copy()\n// Copies internal state of ARC4 to or from a plain object.\n//\nfunction copy(f, t) {\n  t.i = f.i;\n  t.j = f.j;\n  t.S = f.S.slice();\n  return t;\n};\n\n//\n// flatten()\n// Converts an object tree to nested arrays of strings.\n//\nfunction flatten(obj, depth) {\n  var result = [], typ = (typeof obj), prop;\n  if (depth && typ == 'object') {\n    for (prop in obj) {\n      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}\n    }\n  }\n  return (result.length ? result : typ == 'string' ? obj : obj + '\\0');\n}\n\n//\n// mixkey()\n// Mixes a string seed into a key that is an array of integers, and\n// returns a shortened string seed that is equivalent to the result key.\n//\nfunction mixkey(seed, key) {\n  var stringseed = seed + '', smear, j = 0;\n  while (j < stringseed.length) {\n    key[mask & j] =\n      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));\n  }\n  return tostring(key);\n}\n\n//\n// autoseed()\n// Returns an object for autoseeding, using window.crypto and Node crypto\n// module if available.\n//\nfunction autoseed() {\n  try {\n    var out;\n    if (nodecrypto && (out = nodecrypto.randomBytes)) {\n      // The use of 'out' to remember randomBytes makes tight minified code.\n      out = out(width);\n    } else {\n      out = new Uint8Array(width);\n      (global.crypto || global.msCrypto).getRandomValues(out);\n    }\n    return tostring(out);\n  } catch (e) {\n    var browser = global.navigator,\n        plugins = browser && browser.plugins;\n    return [+new Date, global, plugins, global.screen, tostring(pool)];\n  }\n}\n\n//\n// tostring()\n// Converts an array of charcodes to a string\n//\nfunction tostring(a) {\n  return String.fromCharCode.apply(0, a);\n}\n\n//\n// When seedrandom.js is loaded, we immediately mix a few bits\n// from the built-in RNG into the entropy pool.  Because we do\n// not want to interfere with deterministic PRNG state later,\n// seedrandom will not call math.random on its own again after\n// initialization.\n//\nmixkey(math.random(), pool);\n\nexport {\n  seedrandom,\n}\n", "import Func from '../function.js';\nimport Property from '../property.js';\nimport Selector from '../selector.js';\nimport parse_value_group from '../parser/parse-value-group.js';\nimport { uniform_time } from '../uniforms.js';\nimport { prefixer } from '../utils/prefixer.js';\nimport calc from '../calc.js';\nimport { seedrandom } from '../lib/seedrandom.js';\n\nimport { maybe, cell_id, is_nil, get_value, lerp, unique_id } from '../utils/index.js';\nimport { join, make_array, remove_empty_values } from '../utils/list.js'\n\nfunction is_host_selector(s) {\n  return /^\\:(host|doodle)/.test(s);\n}\n\nfunction is_parent_selector(s) {\n  return /^\\:(container|parent)/.test(s);\n}\n\nfunction is_special_selector(s) {\n  return is_host_selector(s) || is_parent_selector(s);\n}\n\nfunction is_pseudo_selecotr(s) {\n  return /\\:before|\\:after/.test(s);\n}\n\nconst MathFunc = {};\nfor (let name of Object.getOwnPropertyNames(Math)) {\n  MathFunc[name] = () => (...args) => {\n    if (typeof Math[name] === 'number') {\n      return Math[name];\n    }\n    args = args.map(n => calc(get_value(n)));\n    return Math[name](...args);\n  }\n}\n\nclass Rules {\n\n  constructor(tokens) {\n    this.tokens = tokens;\n    this.rules = {};\n    this.props = {};\n    this.keyframes = {};\n    this.grid = null;\n    this.seed = null;\n    this.is_grid_defined = false;\n    this.coords = [];\n    this.doodles = {};\n    this.canvas = {};\n    this.pattern = {};\n    this.shaders = {};\n    this.reset();\n    this.custom_properties = {};\n    this.uniforms = {};\n    this.content = {};\n  }\n\n  reset() {\n    this.styles = {\n      host: '',\n      container: '',\n      cells: '',\n      keyframes: ''\n    }\n    this.coords = [];\n    this.doodles = {};\n    this.canvas = {};\n    this.pattern = {};\n    this.shaders = {};\n    this.content = {};\n    for (let key in this.rules) {\n      if (key.startsWith('#c')) {\n        delete this.rules[key];\n      }\n    }\n  }\n\n  add_rule(selector, rule) {\n    let rules = this.rules[selector];\n    if (!rules) {\n      rules = this.rules[selector] = [];\n    }\n    rules.push.apply(rules, make_array(rule));\n  }\n\n  pick_func(name) {\n    return Func[name] || MathFunc[name];\n  }\n\n  apply_func(fn, coords, args) {\n    let _fn = fn(...make_array(coords));\n    let input = [];\n    args.forEach(arg => {\n      let type = typeof arg.value;\n      let is_string_or_number = (type === 'number' || type === 'string');\n      if (!arg.cluster && (is_string_or_number)) {\n        input.push(...parse_value_group(arg.value, { noSpace: true }));\n      }\n      else {\n        if (typeof arg === 'function') {\n          input.push(arg);\n        }\n        else if (!is_nil(arg.value)) {\n          let value = get_value(arg.value);\n          input.push(value);\n        }\n      }\n    });\n    input = remove_empty_values(input);\n    let result = _fn(...make_array(input));\n    return result;\n  }\n\n  compose_aname(...args) {\n    return args.join('-');\n  }\n\n  compose_selector({ x, y, z}, pseudo = '') {\n    return `#${ cell_id(x, y, z) }${ pseudo }`;\n  }\n\n  is_composable(name) {\n    return ['doodle', 'shaders', 'canvas', 'pattern'].includes(name);\n  }\n\n  read_var(value, coords) {\n    let count = coords.count;\n    let group = Object.assign({},\n      this.custom_properties['host'],\n      this.custom_properties['container'],\n      this.custom_properties[count]\n    );\n    if (group[value] !== undefined) {\n      let result = String(group[value]).trim();\n      if (result[0] == '(') {\n        let last = result[result.length - 1];\n        if (last === ')') {\n          result = result.substring(1, result.length - 1);\n        }\n      }\n      return result.replace(/;+$/g, '');\n    }\n    return value;\n  }\n\n  compose_argument(argument, coords, extra = [], parent) {\n    if (!coords.extra) coords.extra = [];\n    coords.extra.push(extra);\n    let result = argument.map(arg => {\n      if (arg.type === 'text') {\n        if (/^\\-\\-\\w/.test(arg.value)) {\n          if (parent && parent.name === '@var') {\n            return arg.value;\n          }\n          return this.read_var(arg.value, coords);\n        }\n        return arg.value;\n      }\n      else if (arg.type === 'func') {\n        let fname = arg.name.substr(1);\n        let fn = this.pick_func(fname);\n        if (typeof fn === 'function') {\n          this.check_uniforms(fname);\n          if (this.is_composable(fname)) {\n            let value = get_value((arg.arguments[0] || [])[0]);\n            if (!is_nil(value)) {\n              switch (fname) {\n                case 'doodle':\n                  return this.compose_doodle(this.inject_variables(value, coords.count));\n                case 'shaders':\n                  return this.compose_shaders(value, coords);\n                case 'canvas':\n                  return this.compose_canvas(value, arg.arguments.slice(1));\n                case 'pattern':\n                  return this.compose_pattern(value, coords);\n              }\n            }\n          }\n          coords.position = arg.position;\n          let args = arg.arguments.map(n => {\n            return fn.lazy\n              ? (...extra) => this.compose_argument(n, coords, extra, arg)\n              : this.compose_argument(n, coords, extra, arg);\n          });\n          let value = this.apply_func(fn, coords, args);\n          return value;\n        } else {\n          return arg.name;\n        }\n      }\n    });\n\n    coords.extra.pop();\n\n    return {\n      cluster: argument.cluster,\n      value: (result.length >= 2 ? ({ value: result.join('') }) : result[0])\n    }\n  }\n\n  compose_doodle(doodle) {\n    let id = unique_id('doodle');\n    this.doodles[id] = doodle;\n    return '${' + id + '}';\n  }\n\n  compose_shaders(shader, {x, y, z}) {\n    let id = unique_id('shader');\n    this.shaders[id] = {\n      id: '--' + id,\n      shader,\n      cell: cell_id(x, y, z)\n    };\n    return '${' + id + '}';\n  }\n\n  compose_pattern(code, {x, y, z}) {\n    let id = unique_id('pattern');\n    this.pattern[id] = {\n      id: '--' + id,\n      code,\n      cell: cell_id(x, y, z)\n    };\n    return '${' + id + '}';\n  }\n\n  compose_canvas(code, rest = []) {\n    let commands = code;\n    let result = rest.map(group => get_value(group[0])).join(',');\n    if (result.length) {\n      commands = code + ',' + result;\n    }\n    let id = unique_id('canvas');\n    this.canvas[id] = { code: commands };\n    return '${' + id + '}';\n  }\n\n  check_uniforms(name) {\n    switch (name) {\n      case 'ut': case 't': this.uniforms.time = true; break;\n      case 'ux': this.uniforms.mousex = true; break;\n      case 'uy': this.uniforms.mousey = true; break;\n      case 'uw': this.uniforms.width = true; break;\n      case 'uh': this.uniforms.height = true; break;\n    }\n  }\n\n  inject_variables(value, count) {\n    let group = Object.assign({},\n      this.custom_properties['host'],\n      this.custom_properties['container'],\n      this.custom_properties[count]\n    );\n    let variables = [];\n    for (let [name, key] of Object.entries(group)) {\n      variables.push(`${name}: ${key};`);\n    }\n    variables = variables.join('');\n    if (variables.length) {\n      return `:doodle { ${variables} }` + value;\n    }\n    return value;\n  }\n\n  compose_value(value, coords) {\n    if (!Array.isArray(value)) {\n      return {\n        value: '',\n        extra: '',\n      }\n    }\n    let extra = '';\n    let output = value.reduce((result, val) => {\n      switch (val.type) {\n        case 'text': {\n          result += val.value;\n          break;\n        }\n        case 'func': {\n          let fname = val.name.substr(1);\n          let fn = this.pick_func(fname);\n          if (typeof fn === 'function') {\n            this.check_uniforms(fname);\n            if (this.is_composable(fname)) {\n              let value = get_value((val.arguments[0] || [])[0]);\n              if (!is_nil(value)) {\n                switch (fname) {\n                  case 'doodle':\n                    result += this.compose_doodle(this.inject_variables(value, coords.count)); break;\n                  case 'shaders':\n                    result += this.compose_shaders(value, coords); break;\n                  case 'pattern':\n                    result += this.compose_pattern(value, coords); break;\n                  case 'canvas':\n                    result += this.compose_canvas(value, val.arguments.slice(1)); break;\n                }\n              }\n            } else {\n              coords.position = val.position;\n              let args = val.arguments.map(arg => {\n                return fn.lazy\n                  ? (...extra) => this.compose_argument(arg, coords, extra, val)\n                  : this.compose_argument(arg, coords, [], val);\n              });\n\n              let output = this.apply_func(fn, coords, args);\n              if (!is_nil(output)) {\n                result += output;\n                if (output.extra) {\n                  extra = output.extra;\n                }\n              }\n            }\n          } else {\n            result += val.name;\n          }\n        }\n      }\n      return result;\n    }, '');\n\n    return {\n      value: output,\n      extra: extra,\n    }\n  }\n\n  compose_rule(token, _coords, selector) {\n    let coords = Object.assign({}, _coords);\n    let prop = token.property;\n    let extra;\n    if (prop === '@seed') {\n      return '';\n    }\n    let value_group = token.value.reduce((ret, v) => {\n      let composed = this.compose_value(v, coords);\n      if (composed) {\n        if (composed.value) {\n          ret.push(composed.value);\n        }\n        if (composed.extra) {\n          extra = composed.extra;\n        }\n      }\n      return ret;\n    }, []);\n\n    let value = value_group.join(', ');\n\n    if (/^animation(\\-name)?$/.test(prop)) {\n      this.props.has_animation = true;\n\n      if (is_host_selector(selector)) {\n        let prefix = uniform_time[prop];\n        if (prefix && value) {\n          value =  prefix + ',' + value;\n        }\n      }\n\n      if (coords.count > 1) {\n        let { count } = coords;\n        switch (prop) {\n          case 'animation-name': {\n            value = value_group\n              .map(n => this.compose_aname(n, count))\n              .join(', ');\n            break;\n          }\n          case 'animation': {\n            value = value_group\n              .map(n => {\n                let group = (n || '').split(/\\s+/);\n                group[0] = this.compose_aname(group[0], count);\n                return group.join(' ');\n              })\n              .join(', ');\n          }\n        }\n      }\n    }\n\n    if (prop === 'content') {\n      if (!/[\"']|^none$|^(var|counter|counters|attr|url)\\(/.test(value)) {\n        value = `'${ value }'`;\n      }\n    }\n\n    if (prop === 'transition') {\n      this.props.has_transition = true;\n    }\n\n    let rule = `${ prop }: ${ value };`\n    rule = prefixer(prop, rule);\n\n    if (prop === 'clip-path') {\n      // fix clip bug\n      rule += ';overflow: hidden;';\n    }\n\n    if (prop === 'width' || prop === 'height') {\n      if (!is_special_selector(selector)) {\n        rule += `--internal-cell-${ prop }: ${ value };`;\n      }\n    }\n\n    let is_image = (\n      /^(background|background\\-image)$/.test(prop) &&\n      /\\$\\{(canvas|shader|pattern)/.test(value)\n    );\n    if (is_image) {\n      rule += 'background-size: 100% 100%;';\n    }\n\n    if (/^\\-\\-/.test(prop)) {\n      let key = _coords.count;\n      if (is_parent_selector(selector)) {\n        key = 'container';\n      }\n      if (is_host_selector(selector)) {\n        key = 'host';\n      }\n      if (!this.custom_properties[key]) {\n        this.custom_properties[key] = {};\n      }\n      this.custom_properties[key][prop] = value;\n    }\n\n    if (/^@/.test(prop) && Property[prop.substr(1)]) {\n      let name = prop.substr(1);\n      let transformed = Property[name](value, {\n        is_special_selector: is_special_selector(selector),\n        grid: coords.grid,\n        max_grid: coords.max_grid,\n        extra\n      });\n      switch (name) {\n        case 'grid': {\n          if (is_host_selector(selector)) {\n            rule = transformed.size || '';\n          } else {\n            rule = '';\n            if (!this.is_grid_defined) {\n              transformed = Property[name](value, {\n                is_special_selector: true,\n                grid: coords.grid,\n                max_grid: coords.max_grid\n              });\n              this.add_rule(':host', transformed.size || '');\n            }\n          }\n          this.grid = coords.grid;\n          this.is_grid_defined = true;\n          break;\n        }\n        case 'content': {\n          rule = '';\n          if (transformed !== undefined && !is_pseudo_selecotr(selector) && !is_parent_selector(selector)) {\n            this.content[this.compose_selector(coords)] = transformed;\n          }\n        }\n        case 'seed': {\n          rule = '';\n          break;\n        }\n        case 'place-cell':\n        case 'place':\n        case 'position':\n        case 'offset': {\n          if (!is_host_selector(selector)) {\n            rule = transformed;\n          }\n          break;\n        }\n        case 'use': {\n          if (token.value.length) {\n            this.compose(coords, token.value);\n          }\n          rule = '';\n          break;\n        }\n        default: {\n          rule = transformed;\n        }\n      }\n    }\n\n    return rule;\n  }\n\n  get_raw_value(token) {\n    let raw = token.raw();\n    if (is_nil(raw)){\n      raw = '';\n    }\n    let [_, ...rest] = raw.split(token.property);\n    // It's not accurate, will be solved after the rewrite of css parser.\n    rest = rest.join(token.property)\n      .replace(/^\\s*:\\s*/, '')\n      .replace(/[;}<]$/, '').trim()\n      .replace(/[;}<]$/, '');\n    return rest;\n  }\n\n  pre_compose_rule(token, _coords) {\n    let coords = Object.assign({}, _coords);\n    let prop = token.property;\n\n    switch (prop) {\n      case '@grid': {\n        let value_group = token.value.reduce((ret, v) => {\n          let composed = this.compose_value(v, coords);\n          if (composed && composed.value) ret.push(composed.value);\n          return ret;\n        }, []);\n        let value = value_group.join(', ');\n        let name = prop.substr(1);\n        let transformed = Property[name](value, {\n          max_grid: _coords.max_grid\n        });\n        this.grid = transformed.grid;\n        break;\n      }\n      case '@use': {\n        if (token.value.length) {\n          this.pre_compose(coords, token.value);\n        }\n        break;\n      }\n    }\n  }\n\n  pre_compose(coords, tokens) {\n    if (is_nil(this.seed)) {\n      // get seed first\n      ;(tokens || this.tokens).forEach(token => {\n        if (token.type === 'rule' && token.property === '@seed') {\n          this.seed = this.get_raw_value(token);\n        }\n        if (token.type === 'pseudo' && is_host_selector(token.selector)) {\n          for (let t of make_array(token.styles)) {\n            if (t.type === 'rule' && t.property === '@seed') {\n              this.seed = this.get_raw_value(t);\n            }\n          }\n        }\n      });\n      if (!is_nil(this.seed)) {\n        coords.update_random(this.seed);\n      }\n    }\n    ;(tokens || this.tokens).forEach(token => {\n      switch (token.type) {\n        case 'rule': {\n          this.pre_compose_rule(token, coords)\n          break;\n        }\n        case 'pseudo': {\n          if (is_host_selector(token.selector)) {\n            (token.styles || []).forEach(token => {\n              this.pre_compose_rule(token, coords);\n            });\n          }\n          break;\n        }\n      }\n    });\n  }\n\n  compose(coords, tokens, initial) {\n    this.coords.push(coords);\n    (tokens || this.tokens).forEach((token, i) => {\n      if (token.skip) return false;\n      if (initial && this.grid) return false;\n\n      switch (token.type) {\n        case 'rule': {\n          this.add_rule(\n            this.compose_selector(coords),\n            this.compose_rule(token, coords)\n          );\n          break;\n        }\n\n        case 'pseudo': {\n          if (token.selector.startsWith(':doodle')) {\n            token.selector = token.selector.replace(/^\\:+doodle/, ':host');\n          }\n          let special = is_special_selector(token.selector);\n          if (special) {\n            token.skip = true;\n          }\n          token.selector.split(',').forEach(selector => {\n            let pseudo = token.styles.map(s =>\n              this.compose_rule(s, coords, selector)\n            );\n            let composed = special\n              ? selector\n              : this.compose_selector(coords, selector);\n            this.add_rule(composed, pseudo);\n          });\n\n          break;\n        }\n\n        case 'cond': {\n          let fn = Selector[token.name.substr(1)];\n          if (fn) {\n            let args = token.arguments.map(arg => {\n              return this.compose_argument(arg, coords);\n            });\n            let result = this.apply_func(fn, coords, args);\n            if (result) {\n              this.compose(coords, token.styles);\n            }\n          }\n          break;\n        }\n\n        case 'keyframes': {\n          if (!this.keyframes[token.name]) {\n            this.keyframes[token.name] = coords => `\n              ${ join(token.steps.map(step => `\n                ${ step.name } {\n                  ${ join(\n                    step.styles.map(s => this.compose_rule(s, coords))\n                  )}\n                }\n              `)) }\n            `;\n          }\n        }\n      }\n    });\n  }\n\n  output() {\n    for (let [selector, rule] of Object.entries(this.rules)) {\n      if (is_parent_selector(selector)) {\n        this.styles.container += `\n          .container {\n            ${ join(rule) }\n          }\n        `;\n      } else {\n        let target = is_host_selector(selector) ? 'host' : 'cells';\n        let value = join(rule).trim();\n        let name = (target === 'host') ? `${ selector }, .host` : selector;\n        this.styles[target] += `${ name } { ${ value  } }`;\n      }\n    }\n\n    if (this.uniforms.time) {\n      this.styles.container += `\n        :host, .host {\n          animation: ${ uniform_time.animation };\n        }\n      `;\n      this.styles.keyframes += `\n       @keyframes ${ uniform_time['animation-name'] } {\n         from { --${ uniform_time.name }: 0 }\n         to { --${ uniform_time.name }: ${ uniform_time['animation-duration'] / 10 } }\n       }\n      `;\n    }\n\n    this.coords.forEach((coords, i) => {\n      for (let [name, keyframe] of Object.entries(this.keyframes)) {\n        let aname = this.compose_aname(name, coords.count);\n        this.styles.keyframes += `\n          ${ maybe(i === 0, `@keyframes ${ name } { ${ keyframe(coords) } }`)}\n          @keyframes ${ aname } {\n            ${ keyframe(coords) }\n          }\n        `;\n      }\n    });\n\n    return {\n      props: this.props,\n      styles: this.styles,\n      grid: this.grid,\n      seed: this.seed,\n      random: this.random,\n      doodles: this.doodles,\n      shaders: this.shaders,\n      canvas: this.canvas,\n      pattern: this.pattern,\n      uniforms: this.uniforms,\n      content: this.content,\n    }\n  }\n\n}\n\nfunction generate_css(tokens, grid_size, seed_value, max_grid, seed_random) {\n  let rules = new Rules(tokens);\n  let random = seed_random || seedrandom(String(seed_value));\n  let context = {};\n\n  function update_random(seed) {\n    random = seedrandom(String(seed));\n  }\n\n  function rand(start = 0, end) {\n    if (arguments.length == 1) {\n      [start, end] = [0, start];\n    }\n    return lerp(random(), start, end);\n  }\n\n  function pick(...items) {\n    let args = items.reduce((acc, n) => acc.concat(n), []);\n    return args[~~(random() * args.length)];\n  }\n\n  function shuffle(arr) {\n    let ret = [...arr];\n    let m = arr.length;\n    while (m) {\n      let i = ~~(random() * m--);\n      let t = ret[m];\n      ret[m] = ret[i];\n      ret[i] = t;\n    }\n    return ret;\n  }\n\n  rules.pre_compose({\n    x: 1, y: 1, z: 1, count: 1, context: {},\n    grid: { x: 1, y: 1, z: 1, count: 1 },\n    random, rand, pick, shuffle,\n    max_grid, update_random,\n  });\n\n  let { grid, seed } = rules.output();\n\n  if (grid) {\n    grid_size = grid;\n  }\n\n  if (seed) {\n    seed = String(seed);\n    random = seedrandom(seed);\n  } else {\n    seed = seed_value;\n  }\n\n  if (is_nil(seed)) {\n    seed = Date.now();\n    random = seedrandom(seed);\n  }\n\n  seed = String(seed);\n  rules.seed = seed;\n  rules.random = random;\n  rules.reset();\n\n  if (grid_size.z == 1) {\n    for (let y = 1, count = 0; y <= grid_size.y; ++y) {\n      for (let x = 1; x <= grid_size.x; ++x) {\n        rules.compose({\n          x, y, z: 1,\n          count: ++count, grid: grid_size, context,\n          rand, pick, shuffle,\n          random, seed,\n          max_grid,\n        });\n      }\n    }\n  }\n  else {\n    for (let z = 1, count = 0; z <= grid_size.z; ++z) {\n      rules.compose({\n        x: 1, y: 1, z,\n        count: ++count, grid: grid_size, context,\n        rand, pick, shuffle,\n        random, seed,\n        max_grid,\n      });\n    }\n  }\n\n  return rules.output();\n}\n\nexport {\n  generate_css,\n}\n", "import Cache from '../utils/cache.js';\nimport { hash } from '../utils/index.js';\n\nfunction create_shader(gl, type, source) {\n  let shader = gl.createShader(type);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n  return shader;\n};\n\nfunction create_program(gl, vss, fss) {\n  let vs = create_shader(gl, gl.VERTEX_SHADER, vss);\n  let fs = create_shader(gl, gl.FRAGMENT_SHADER, fss);\n  let prog = gl.createProgram();\n  gl.attachShader(prog, vs);\n  gl.attachShader(prog, fs);\n  gl.linkProgram(prog);\n  if (!gl.getProgramParameter(prog, gl.LINK_STATUS)) {\n    console.warn('Link failed: ' + gl.getProgramInfoLog(prog));\n    console.warn('vs info-log: ' + gl.getShaderInfoLog(vs));\n    console.warn('fs info-log: ' + gl.getShaderInfoLog(fs));\n  }\n  return prog;\n}\n\nfunction add_uniform(fragment, uniform) {\n  if (!fragment.includes(uniform)) {\n    return uniform + '\\n' + fragment;\n  }\n  return fragment;\n}\n\nconst fragment_head = `#version 300 es\n  precision highp float;\n  out vec4 FragColor;\n`;\n\nconst default_vertex_shader = `#version 300 es\n  in vec4 position;\n  void main() {\n    gl_Position = position;\n  }\n`;\n\n// https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL\nfunction load_texture(gl, image, i) {\n  const texture = gl.createTexture();\n  gl.activeTexture(gl['TEXTURE' + i]);\n  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA,gl.UNSIGNED_BYTE, image);\n\n  // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n}\n\nfunction draw_shader(shaders, width, height, seed) {\n  let result = Cache.get(shaders);\n  if (result) {\n    return Promise.resolve(result);\n  }\n  let canvas = document.createElement('canvas');\n  let ratio = window.devicePixelRatio || 1;\n  width *= ratio;\n  height *= ratio;\n  canvas.width = width;\n  canvas.height = height;\n\n  let gl = canvas.getContext('webgl2', {preserveDrawingBuffer: true});\n  if (!gl) return Promise.resolve('');\n\n  // resolution uniform\n  let fragment = add_uniform(shaders.fragment || '', 'uniform vec2 u_resolution;');\n\n  fragment = add_uniform(fragment, 'uniform float u_time;');\n  fragment = add_uniform(fragment, 'uniform float u_timeDelta;');\n  fragment = add_uniform(fragment, 'uniform int u_frameIndex;');\n  fragment = add_uniform(fragment, 'uniform vec2 u_seed;');\n  // fragment = add_uniform(fragment, 'uniform vec4 u_mouse;');\n\n  // texture uniform\n  shaders.textures.forEach(n => {\n    let uniform = `uniform sampler2D ${ n.name };`;\n    fragment =  add_uniform(fragment, uniform);\n  });\n\n  const isShaderToyFragment = /(^|[^\\w\\_])void\\s+mainImage\\(\\s*out\\s+vec4\\s+fragColor,\\s*in\\s+vec2\\s+fragCoord\\s*\\)/mg.test(fragment);\n  \n  if(isShaderToyFragment) {\n    fragment = `// https://www.shadertoy.com/howto\n\n#define iResolution vec3(u_resolution, 0)\n#define iTime u_time\n#define iTimeDelta u_timeDelta\n#define iFrame u_frameIndex\n\n${shaders.textures.map((n, i) => `#define iChannel${i} ${n.name}`).join('\\n')}\n\n${fragment}\n\nvoid main() {\n  mainImage(FragColor, gl_FragCoord.xy);\n}`\n  }\n\n  let program = create_program(\n    gl,\n    shaders.vertex || default_vertex_shader,\n    fragment_head + fragment\n  );\n\n  // position in vertex shader\n  let positionAttributeLocation = gl.getAttribLocation(program, 'position');\n  let positionBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n  let vertices = [-1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1];\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);\n  gl.enableVertexAttribArray(positionAttributeLocation);\n  gl.vertexAttribPointer(positionAttributeLocation, 2, gl.FLOAT, false, 0, 0);\n\n  gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n  gl.clearColor(0, 0, 0, 0);\n  gl.clear(gl.COLOR_BUFFER_BIT);\n\n  gl.useProgram(program);\n\n  // resolve uniforms\n  const uResolutionLoc = gl.getUniformLocation(program, \"u_resolution\");\n  gl.uniform2fv(uResolutionLoc, [width, height]);\n\n  shaders.textures.forEach((n, i) => {\n    load_texture(gl, n.value, i);\n    gl.uniform1i(gl.getUniformLocation(program, n.name), i);\n  });\n\n  // vec2 u_seed, u_seed.x = hash(doodle.seed) / 1e16, u_seed.y = Math.random()\n  const uSeed = gl.getUniformLocation(program, \"u_seed\");\n  if(uSeed) {\n    gl.uniform2f(uSeed, hash(seed) / 1e16, Math.random());\n  }\n\n  // resolve image data in 72dpi :(\n  const uTimeLoc = gl.getUniformLocation(program, \"u_time\");\n  const uFrameLoc = gl.getUniformLocation(program, \"u_frameIndex\");\n  const uTimeDelta = gl.getUniformLocation(program, \"u_timeDelta\");\n  if(uTimeLoc || uTimeDelta || uFrameLoc) {\n    let frameIndex = 0;\n    let currentTime = 0;\n    return Promise.resolve(Cache.set(shaders, (t) => {\n      gl.clear(gl.COLOR_BUFFER_BIT);\n      if(uTimeLoc) gl.uniform1f(uTimeLoc, t / 1000);\n      if(uFrameLoc) gl.uniform1i(uFrameLoc, frameIndex++);\n      if(uTimeDelta) {\n        gl.uniform1f(uTimeDelta, (currentTime - t) / 1000);\n        currentTime = t;\n      }\n      gl.drawArrays(gl.TRIANGLES, 0, 6);\n      return canvas.toDataURL();\n    }));\n  } else {\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n    return Promise.resolve(Cache.set(shaders, canvas.toDataURL()));\n  }\n}\n\nexport {\n  draw_shader,\n}\n", "import { scan, iterator } from './tokenizer.js';\n\nfunction readStatement(iter, token) {\n  let fragment = [];\n  while (iter.next()) {\n    let { curr, next } = iter.get();\n    let isStatementBreak = !next || curr.isSymbol(';') || next.isSymbol('}');\n    fragment.push(curr);\n    if (isStatementBreak) {\n      break;\n    }\n  }\n  if (fragment.length) {\n    token.value = joinToken(fragment);\n  }\n  return token;\n}\n\nfunction walk(iter, parentToken) {\n  let rules = [];\n  let fragment = [];\n  let tokenType = parentToken && parentToken.type || '';\n  let stack = [];\n\n  while (iter.next()) {\n    let { prev, curr, next } = iter.get();\n    let isBlockBreak = !next || curr.isSymbol('}');\n    if (tokenType === 'block' && isBlockBreak) {\n      if (!next && rules.length && !curr.isSymbol('}')) {\n        rules[rules.length - 1].value += (';' + curr.value);\n      }\n      parentToken.value = rules;\n      break;\n    }\n    else if (curr.isSymbol('{') && fragment.length && !stack.length) {\n      let selectors = parseSelector(fragment);\n      if (!selectors.length) {\n        continue;\n      }\n      let block = walk(iter, {\n        type: 'block',\n        name: 'unkown',\n        value: []\n      });\n\n      selectors.forEach(selector => {\n        let newBlock = Object.assign({}, block, {\n          name: selector.name,\n          args: selector.args\n        });\n        rules.push(newBlock);\n      });\n      fragment = [];\n    }\n    else if (curr.isSymbol(':') && fragment.length && !stack.length) {\n      let prop = joinToken(fragment);\n      rules.push(readStatement(iter, {\n        type: 'statement',\n        name: prop,\n        value: ''\n      }));\n      if (tokenType == 'block') {\n        parentToken.value = rules;\n      }\n      fragment = [];\n    }\n    else if (curr.isSymbol(';')) {\n      if (rules.length && fragment.length) {\n        rules[rules.length - 1].value += (';' + joinToken(fragment));\n        fragment = [];\n      }\n    } else {\n      if (curr.isSymbol('(')) {\n        stack.push(curr);\n      }\n      if (curr.isSymbol(')')) {\n        stack.pop();\n      }\n      fragment.push(curr);\n    }\n  }\n\n  if (rules.length && tokenType == 'block') {\n    parentToken.value = rules;\n  }\n  return tokenType ? parentToken : rules;\n}\n\nfunction joinToken(tokens) {\n  return tokens\n    .filter((token, i) => {\n      if (token.isSymbol(';') && i === tokens.length - 1) return false;\n      return true;\n    })\n    .map(n => n.value).join('');\n}\n\nfunction parseSelector(tokens) {\n  let iter = iterator(tokens);\n  let groups = [];\n  let selectorName = '';\n  let args = [];\n  let fragments = [];\n  let stack = [];\n  while (iter.next()) {\n    let { curr, next } = iter.get();\n    if (!selectorName.length && curr.isWord()) {\n      selectorName = curr.value;\n    }\n    else if (curr.isSymbol('(')) {\n      if (stack.length) {\n        fragments.push(curr.value);\n      }\n      stack.push(curr);\n    }\n    else if (curr.isSymbol(')')) {\n      stack.pop();\n      if (stack.length) {\n        fragments.push(curr.value);\n      } else if (fragments.length) {\n        args.push(fragments.join(''));\n        fragments = [];\n      }\n    }\n    else if (curr.isSymbol(',')) {\n      if (stack.length) {\n        args.push(fragments.join(''));\n        fragments = [];\n      } else {\n        if (fragments.length) {\n          args.push(fragments.join(''));\n          fragments = [];\n        }\n        if (selectorName) {\n          groups.push({\n            name: selectorName,\n            args\n          });\n          selectorName = '';\n          args = [];\n          fragments = [];\n        }\n      }\n    }\n    else {\n      fragments.push(curr.value);\n    }\n  }\n\n  if (selectorName) {\n    groups.push({\n      name: selectorName,\n      args\n    });\n  }\n\n  return groups.filter((v, i, self) => {\n    let idx = self.findIndex(n => {\n      return (n.name === v.name && v.args.join('') == n.args.join(''));\n    });\n    return idx === i;\n  });\n}\n\nfunction parse(source) {\n  let iter = iterator(scan(source));\n  let tokens = walk(iter);\n  return tokens;\n}\n\nexport default parse;\n", "import Cache from '../utils/cache.js';\nimport parse_pattern from '../parser/parse-pattern.js';\n\nfunction generate_shader(input, grid) {\n  return `\n    vec3 mapping(vec2 uv, vec2 grid) {\n      vec2 _grid = 1.0/grid;\n      float x = ceil(uv.x/_grid.x);\n      float y = ceil(grid.y - uv.y/_grid.y);\n      float i = x + (y - 1.0) * y;\n      return vec3(x, y, i);\n    }\n    vec4 getColor(float x, float y, float i, float I, float X, float Y, float t) {\n      vec4 color = vec4(0, 0, 0, 0);\n      ${input}\n      return color;\n    }\n    void main() {\n      vec2 uv = gl_FragCoord.xy/u_resolution.xy;\n      vec2 grid = vec2(${grid.x}, ${grid.y});\n      vec3 p = mapping(uv, grid);\n      FragColor = getColor(p.x, p.y, p.z, grid.x * grid.y, grid.x, grid.y, u_time);\n    }\n  `;\n}\n\nfunction generate_statement(token, extra) {\n  if (token.name === 'fill') {\n    let {r, g, b, a} = extra.get_rgba_color(token.value);\n    return {\n      type: 'statement',\n      value: `\\ncolor = vec4(${float(r/255)}, ${float(g/255)}, ${float(b/255)}, ${float(a)});\\n`,\n    }\n  }\n  if (token.name == 'grid') {\n    return {\n      type: 'grid',\n      value: token.value,\n    }\n  }\n  return {\n    type: 'statement',\n    value: ''\n  }\n}\n\nfunction generate_block(token, extra) {\n  if (token.name === 'match') {\n    let cond = token.args[0];\n    let values = [];\n    token.value.forEach(t => {\n      let statement = generate_statement(t, extra);\n      if (statement.type == 'statement') {\n        values.push(statement.value);\n      }\n    });\n    return `\n      if (${cond}) {\n        ${values.join('')}\n      }\n    `\n  }\n  return '';\n}\n\nfunction float(n) {\n  return String(n).includes('.') ? n : n + '.0';\n}\n\nfunction get_grid(input) {\n  let [x, y = x] = String(input + '')\n    .replace(/\\s+/g, '')\n    .replace(/[,，xX]+/g, 'x')\n    .split('x')\n    .map(n => parseInt(n));\n  if (!x || x < 1) x = 1;\n  if (!y || y < 1) y = 1;\n  return { x, y }\n}\n\nfunction draw_pattern(code, extra) {\n  let tokens = parse_pattern(code);\n  let result = [];\n  let grid = {x: 1, y: 1 };\n  tokens.forEach(token => {\n    if (token.type === 'statement') {\n      let statement = generate_statement(token, extra);\n      if (statement.type == 'statement') {\n        result.push(statement.value);\n      }\n      if (statement.type === 'grid') {\n        grid = get_grid(statement.value);\n      }\n    } else if (token.type === 'block') {\n      result.push(generate_block(token, extra));\n    }\n  });\n  return generate_shader(result.join(''), grid);\n}\n\nexport {\n  draw_pattern,\n}\n", "import { un_entity, next_id } from '../utils/index.js';\nimport Cache from '../utils/cache.js';\n\nconst nextId = next_id();\n\nfunction draw_canvas(code) {\n  let result = Cache.get(code);\n  if (result) {\n    return Promise.resolve(result);\n  }\n  let name = nextId('css-doodle-paint');\n  let wrapped = generate(name, code);\n\n  let blob = new Blob([wrapped], { type: 'text/javascript' });\n  try {\n    if (CSS.paintWorklet) {\n      CSS.paintWorklet.addModule(URL.createObjectURL(blob));\n    }\n  } catch(e) {}\n\n  return Promise.resolve(Cache.set(code, `paint(${name})`));\n}\n\nfunction generate(name, code) {\n  code = un_entity(code);\n  // make it so\n  if (!code.includes('paint(')) {\n    code = `\n      paint(ctx, {width, height}, props) {\n        ${code}\n      }\n    `\n  }\n  return `\n    registerPaint('${name}', class {\n      ${ code }\n    })\n  `;\n}\n\nexport {\n  draw_canvas,\n}\n", "import { cache_image, is_safari } from '../utils/index.js';\n\nfunction svg_to_png(svg, width, height, scale) {\n  return new Promise((resolve, reject) => {\n    let source = `data:image/svg+xml;utf8,${ encodeURIComponent(svg) }`;\n    function action() {\n      let img = new Image();\n      img.crossOrigin = 'anonymous';\n      img.src = source;\n\n      img.onload = () => {\n        let canvas = document.createElement('canvas');\n        let ctx = canvas.getContext('2d');\n\n        let dpr = window.devicePixelRatio || 1;\n        /* scale with devicePixelRatio only when the scale equals 1 */\n        if (scale != 1) {\n          dpr = 1;\n        }\n\n        canvas.width = width * dpr;\n        canvas.height = height * dpr;\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n        try {\n          canvas.toBlob(blob => {\n            resolve({\n              blob,\n              source,\n              url: URL.createObjectURL(blob)\n            });\n          });\n        } catch (e) {\n          reject(e);\n        }\n      }\n    }\n\n    if (is_safari()) {\n      cache_image(source, action, 200);\n    } else {\n      action();\n    }\n  });\n}\n\nexport {\n  svg_to_png,\n}\n", "function get_all_variables(element) {\n  if (typeof getComputedStyle === 'undefined') {\n    return '';\n  }\n  let ret = {};\n  if (element.computedStyleMap) {\n    for (let [prop, value] of element.computedStyleMap()) {\n      if (prop.startsWith('--')) {\n        ret[prop] = value[0][0];\n      }\n    }\n  } else {\n    let styles = getComputedStyle(element);\n    for (let prop of styles) {\n      if (prop.startsWith('--')) {\n        ret[prop] = styles.getPropertyValue(prop);\n      }\n    }\n  }\n  return inline(ret);\n}\n\nfunction get_variable(element, name) {\n  if (typeof getComputedStyle === 'undefined') {\n    return '';\n  }\n  return getComputedStyle(element).getPropertyValue(name)\n    .trim()\n    .replace(/^\\(|\\)$/g, '');\n}\n\nfunction inline(map) {\n  let result = [];\n  for (let [prop, value] of Object.entries(map)) {\n    result.push(prop + ':' + value);\n  }\n  return result.join(';');\n}\n\nexport {\n  get_all_variables,\n  get_variable,\n}\n", "function transform(color) {\n  let [r, g, b, a = 1] = color\n    .replace(/rgba?\\((.+)\\)/, (_, v) => v)\n    .split(/,\\s*/)\n  return {r, g, b, a};\n}\n\nfunction get_rgba_color(root, value) {\n  let element = root.querySelector('#defs');\n  if (!element) {\n    return { r: 0, g: 0, b: 0, a: 1 }\n  }\n  element.style.color = value;\n  return transform(getComputedStyle(element).color);\n}\n\nexport {\n  get_rgba_color,\n}\n", "const STEP60 = 1000 / 60; // 60fps\nconst STEP1 = 1000 / 1;   // 1fps\n\nfunction createAnimationFrame(fn) {\n  let id;\n  let time = 0;\n  let lastTime = 0;\n  let lastStep = 0;\n  let paused = false;\n  function loop(stamp) {\n    if (!time) time = stamp;\n    fn(time);\n    let step = (stamp - lastTime);\n    if (step < STEP60) step = STEP60;\n    if (step > STEP1) step = lastStep || STEP1;\n    if (lastTime) time += step;\n    lastStep = step;\n    lastTime = stamp;\n    id = requestAnimationFrame(loop);\n  }\n  id = requestAnimationFrame(loop);\n  return {\n    resume() {\n      if (id && paused) {\n        paused = false;\n        id = requestAnimationFrame(loop);\n      }\n    },\n    pause() {\n      if (id) {\n        cancelAnimationFrame(id);\n        paused = true;\n      }\n    },\n    cancel() {\n      if (id) {\n        paused = false;\n        cancelAnimationFrame(id);\n        id = null;\n      }\n    },\n  }\n}\n\nexport default createAnimationFrame;\n", "import parse_css from './parser/parse-css.js';\nimport parse_grid from './parser/parse-grid.js';\nimport parse_shaders from './parser/parse-shaders.js';\n\nimport { generate_css } from './generator/css.js';\nimport { draw_shader } from './generator/shader.js';\nimport { draw_pattern } from './generator/pattern.js';\nimport { draw_canvas } from './generator/canvas.js';\nimport { svg_to_png } from './generator/svg-to-png.js';\n\nimport * as Uniforms from './uniforms.js';\n\nimport { get_props } from './utils/get-props.js';\nimport { get_variable, get_all_variables } from './utils/variables.js';\nimport { get_rgba_color } from './utils/get-rgba-color.js';\nimport Cache from './utils/cache.js';\nimport create_animation_frame from './utils/create-animation-frame.js';\n\nimport {\n  make_tag_function,\n  cell_id, is_nil,\n  normalize_png_name, cache_image,\n  is_safari, entity, un_entity,\n  maybe\n} from './utils/index.js';\n\nif (typeof customElements !== 'undefined') {\n  class Doodle extends HTMLElement {\n    constructor() {\n      super();\n      this.doodle = this.attachShadow({ mode: 'open' });\n      this.animations = [];\n      this.extra = {\n        get_variable: name => get_variable(this, name),\n        get_rgba_color: value => get_rgba_color(this.shadowRoot, value),\n      };\n    }\n\n    connectedCallback(again) {\n      if (this.innerHTML) {\n        this.load(again);\n      } else {\n        setTimeout(() => this.load(again));\n      }\n    }\n\n    disconnectedCallback() {\n      this.cleanup();\n    }\n\n    cleanup() {\n      Cache.clear();\n      for (let animation of this.animations) {\n        animation.cancel();\n      }\n      this.animations = [];\n    }\n\n    update(styles) {\n      this.cleanup();\n      // Use old rules to update\n      if (!styles) {\n        styles = un_entity(this.innerHTML);\n      }\n      if (this.innerHTML !== styles) {\n        this.innerHTML = styles;\n      }\n      if (!this.grid_size) {\n        this.grid_size = this.get_grid();\n      }\n\n      const { x: gx, y: gy, z: gz } = this.grid_size;\n      const use = this.get_use();\n\n      let old_content = '';\n      if (this.compiled) {\n        old_content = this.compiled.content;\n      }\n\n      const compiled = this.generate(parse_css(use + styles, this.extra));\n\n      let grid = compiled.grid || this.get_grid();\n      let { x, y, z } = grid;\n\n      let should_rebuild = (\n           !this.shadowRoot.innerHTML\n        || (gx !== x || gy !== y || gz !== z)\n        || (JSON.stringify(old_content) !== JSON.stringify(compiled.content))\n      );\n\n      Object.assign(this.grid_size, grid);\n\n      if (should_rebuild) {\n        return compiled.grid\n          ? this.build_grid(compiled, grid)\n          : this.build_grid(this.generate(parse_css(use + styles, this.extra)), grid);\n      }\n\n      let replace = this.replace(compiled);\n      this.set_content('.style-keyframes', replace(compiled.styles.keyframes));\n\n      if (compiled.props.has_animation) {\n        this.set_content('.style-cells', '');\n        this.set_content('.style-container', '');\n      }\n\n      setTimeout(() => {\n        this.set_content('.style-container', replace(\n            get_grid_styles(this.grid_size)\n          + compiled.styles.host\n          + compiled.styles.container\n        ));\n        this.set_content('.style-cells', replace(compiled.styles.cells));\n      });\n    }\n\n    get grid() {\n      return Object.assign({}, this.grid_size);\n    }\n\n    set grid(grid) {\n      this.attr('grid', grid);\n      this.connectedCallback(true);\n    }\n\n    get seed() {\n      return this._seed_value;\n    }\n\n    set seed(seed) {\n      this.attr('seed', seed);\n      this.connectedCallback(true);\n    }\n\n    get use() {\n      return this.attr('use');\n    }\n\n    set use(use) {\n      this.attr('use', use);\n      this.connectedCallback(true);\n    }\n\n    get_max_grid() {\n      return this.hasAttribute('experimental') ? 256 : 64;\n    }\n\n    get_grid() {\n      return parse_grid(this.attr('grid'), this.get_max_grid());\n    }\n\n    get_use() {\n      let use = String(this.attr('use') || '').trim();\n      if (/^var\\(/.test(use)) {\n        use = `@use:${ use };`;\n      }\n      return use;\n    }\n\n    attr(name, value) {\n      if (arguments.length === 1) {\n        return this.getAttribute(name);\n      }\n      if (arguments.length === 2) {\n        this.setAttribute(name, value);\n        return value;\n      }\n    }\n\n    generate(parsed) {\n      let grid = this.get_grid();\n      let seed = this.attr('seed') || this.attr('data-seed');\n      if (is_nil(seed)) {\n        seed = Date.now();\n      }\n      let compiled = this.compiled = generate_css(\n        parsed, grid, seed, this.get_max_grid()\n      );\n      this._seed_value = compiled.seed;\n      this._seed_random = compiled.random;\n      return compiled;\n    }\n\n    doodle_to_image(code, options, fn) {\n      if (typeof options === 'function') {\n        fn = options;\n        options = null;\n      }\n      code = ':doodle { width:100%;height:100% }' + code;\n      let parsed = parse_css(code, this.extra);\n      let _grid = parse_grid('');\n      let compiled = generate_css(parsed, _grid, this._seed_value, this.get_max_grid(), this._seed_random);\n      let grid = compiled.grid ? compiled.grid : _grid;\n      const { keyframes, host, container, cells } = compiled.styles;\n\n      let replace = this.replace(compiled);\n      let grid_container = create_grid(grid, compiled.content);\n\n      let size = (options && options.width && options.height)\n        ? `width=\"${ options.width }\" height=\"${ options.height }\"`\n        : '';\n\n      replace(`\n        <svg ${ size } xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"none\">\n          <foreignObject width=\"100%\" height=\"100%\">\n            <div class=\"host\" xmlns=\"http://www.w3.org/1999/xhtml\">\n              <style>\n                ${ get_basic_styles() }\n                ${ get_grid_styles(grid) }\n                ${ host }\n                ${ container }\n                ${ cells }\n                ${ keyframes }\n              </style>\n              <svg id=\"defs\" xmlns=\"http://www.w3.org/2000/svg\" style=\"width:0; height:0\"></svg>\n              ${ grid_container }\n            </div>\n          </foreignObject>\n        </svg>\n      `).then(result => {\n        let source =`data:image/svg+xml;base64,${ window.btoa(unescape(encodeURIComponent(result))) }`;\n        if (is_safari()) {\n          cache_image(source);\n        }\n        fn(source);\n      });\n    }\n\n    pattern_to_image({ code, cell, id }, fn) {\n      let shader = draw_pattern(code, this.extra);\n      this.shader_to_image({ shader, cell, id }, fn);\n    }\n\n    canvas_to_image({ code }, fn) {\n      draw_canvas(code).then(fn);\n    }\n\n    pause() {\n      this.setAttribute('cssd-paused-animation', true);\n      for (let animation of this.animations) {\n        animation.pause();\n      }\n    }\n\n    resume() {\n      this.removeAttribute('cssd-paused-animation');\n      for (let animation of this.animations) {\n        animation.resume();\n      }\n    }\n\n    shader_to_image({ shader, cell, id }, fn) {\n      let parsed = typeof shader === 'string' ?  parse_shaders(shader) : shader;\n      let element = this.doodle.getElementById(cell);\n      const seed = this.seed;\n\n      const set_shader_prop = (v) => {\n        element.style.setProperty(id, `url(${v})`);\n      }\n\n      const tick = (value) => {\n        if (typeof value === 'function') {\n          let animation = create_animation_frame(t => {\n            set_shader_prop(value(t));\n          });\n          this.animations.push(animation);\n          return '';\n        }\n        set_shader_prop(value);\n      }\n\n      let { width, height } = element && element.getBoundingClientRect() || {\n        width: 0, height: 0\n      };\n\n      let ratio = window.devicePixelRatio || 1;\n      if (!parsed.textures.length || parsed.ticker) {\n        draw_shader(parsed, width, height, seed).then(tick).then(fn);\n      }\n      // Need to bind textures first\n      else {\n        let transforms = parsed.textures.map(texture => {\n          return new Promise(resolve => {\n            this.doodle_to_image(texture.value, { width, height }, src => {\n              let img = new Image();\n              img.width = width * ratio;\n              img.height = height * ratio;\n              img.onload = () => resolve({ name: texture.name, value: img });\n              img.src = src;\n            });\n          });\n        });\n        Promise.all(transforms).then(textures => {\n          parsed.textures = textures;\n          draw_shader(parsed, width, height, seed).then(tick).then(fn);\n        });\n      }\n    }\n\n    load(again) {\n      this.cleanup();\n      let use = this.get_use();\n      let parsed = parse_css(use + un_entity(this.innerHTML), this.extra);\n      let compiled = this.generate(parsed);\n      let { uniforms } = compiled;\n\n      if (!again) {\n        if (this.hasAttribute('click-to-update')) {\n          this.addEventListener('click', e => this.update());\n        }\n      }\n\n      this.grid_size = compiled.grid\n        ? compiled.grid\n        : this.get_grid();\n\n      this.build_grid(compiled, this.grid_size);\n    }\n\n    replace({ doodles, shaders, canvas, pattern }) {\n      let doodle_ids = Object.keys(doodles);\n      let shader_ids = Object.keys(shaders);\n      let canvas_ids = Object.keys(canvas);\n      let pattern_ids = Object.keys(pattern);\n      let length = doodle_ids.length + canvas_ids.length + shader_ids.length + pattern_ids.length;\n      return input => {\n        if (!length) {\n          return Promise.resolve(input);\n        }\n        let mappings = [].concat(\n          doodle_ids.map(id => {\n            if (input.includes(id)) {\n              return new Promise(resolve => {\n                this.doodle_to_image(doodles[id], value => resolve({ id, value }));\n              });\n            } else {\n              return Promise.resolve('');\n            }\n          }),\n          shader_ids.map(id => {\n            if (input.includes(id)) {\n              return new Promise(resolve => {\n                this.shader_to_image(shaders[id], value => resolve({ id, value }));\n              });\n            } else {\n              return Promise.resolve('');\n            }\n          }),\n          canvas_ids.map(id => {\n            if (input.includes(id)) {\n              return new Promise(resolve => {\n                this.canvas_to_image(canvas[id], value => resolve({ id, value }));\n              });\n            } else {\n              return Promise.resolve('');\n            }\n          }),\n          pattern_ids.map(id => {\n            if (input.includes(id)) {\n              return new Promise(resolve => {\n                this.pattern_to_image(pattern[id], value => resolve({ id, value }));\n              });\n            } else {\n              return Promise.resolve('');\n            }\n          }),\n        );\n\n        return Promise.all(mappings).then(mapping => {\n          for (let {id, value} of mapping) {\n            /* default to data-uri for doodle and pattern */\n            let target = `url(${value})`;\n            /* canvas uses css painting api */\n            if (/^canvas/.test(id)) target = value;\n            /* shader uses css vars */\n            if (/^shader|^pattern/.test(id)) target = `var(--${id})`;\n            input = input.replaceAll('${' + id + '}', target);\n          }\n          return input;\n        });\n      }\n    }\n\n    build_grid(compiled, grid) {\n      const { has_transition, has_animation } = compiled.props;\n      let has_delay = (has_transition || has_animation);\n\n      const { keyframes, host, container, cells } = compiled.styles;\n      let style_container = get_grid_styles(grid) + host + container;\n      let style_cells = has_delay ? '' : cells;\n\n      const { uniforms, content } = compiled;\n\n      let replace = this.replace(compiled);\n\n      this.doodle.innerHTML = `\n        <style>${ get_basic_styles() }</style>\n        <style class=\"style-keyframes\">${ keyframes }</style>\n        <style class=\"style-container\">${ style_container }</style>\n        <style class=\"style-cells\">${ style_cells }</style>\n        <svg id=\"defs\" xmlns=\"http://www.w3.org/2000/svg\" style=\"width:0;height:0\"></svg>\n        ${ create_grid(grid, content) }\n      `;\n\n      this.set_content('.style-container', replace(style_container));\n\n      if (has_delay) {\n        setTimeout(() => {\n          this.set_content('.style-cells', replace(cells));\n        }, 50);\n      } else {\n        this.set_content('.style-cells', replace(cells));\n      }\n\n      if (uniforms.time) {\n        this.register_uniform_time();\n      }\n      if (uniforms.mousex || uniforms.mousey) {\n        this.register_uniform_mouse(uniforms);\n      } else {\n        this.remove_uniform_mouse();\n      }\n      if (uniforms.width || uniforms.height) {\n        this.register_uniform_resolution(uniforms);\n      } else {\n        this.remove_uniform_resolution();\n      }\n    }\n\n    register_uniform_mouse(uniforms) {\n      if (!this.uniform_mouse_callback) {\n        let { uniform_mousex, uniform_mousey } = Uniforms;\n        this.uniform_mouse_callback = e => {\n          let data = e.detail || e;\n          if (uniforms.mousex) {\n            this.style.setProperty('--' + uniform_mousex.name, data.offsetX);\n          }\n          if (uniforms.mousey) {\n            this.style.setProperty('--' + uniform_mousey.name, data.offsetY);\n          }\n        }\n        this.addEventListener('pointermove', this.uniform_mouse_callback);\n        let event = new CustomEvent('pointermove', { detail: { offsetX: 0, offsetY: 0}});\n        this.dispatchEvent(event);\n      }\n    }\n\n    remove_uniform_mouse() {\n      if (this.uniform_mouse_callback) {\n        let { uniform_mousex, uniform_mousey } = Uniforms;\n        this.style.removeProperty('--' + uniform_mousex.name);\n        this.style.removeProperty('--' + uniform_mousey.name);\n        this.removeEventListener('pointermove', this.uniform_mouse_callback);\n        this.uniform_mouse_callback = null;\n      }\n    }\n\n    register_uniform_resolution(uniforms) {\n      if (!this.uniform_resolution_observer) {\n        let { uniform_width, uniform_height } = Uniforms;\n        const setProperty = () => {\n          let box = this.getBoundingClientRect();\n          if (uniforms.width) {\n            this.style.setProperty('--' + uniform_width.name, box.width);\n          }\n          if (uniforms.height) {\n            this.style.setProperty('--' + uniform_height.name, box.height);\n          }\n        };\n        setProperty();\n        this.uniform_resolution_observer = new ResizeObserver(entries => {\n          for (let entry of entries) {\n            let data = entry.contentBoxSize || entry.contentRect;\n            if (data) setProperty();\n          }\n        });\n        this.uniform_resolution_observer.observe(this);\n      }\n    }\n\n    remove_uniform_resolution() {\n      if (this.uniform_resolution_observer) {\n        let { uniform_width, uniform_height } = Uniforms;\n        this.style.removeProperty('--' + uniform_width.name);\n        this.style.removeProperty('--' + uniform_height.name);\n        this.uniform_resolution_observer.unobserve(this);\n        this.uniform_resolution_observer = null;\n      }\n    }\n\n    register_uniform_time() {\n      if (!window.CSS || !window.CSS.registerProperty) {\n        return false;\n      }\n      if (!this.is_uniform_time_registered) {\n        let { uniform_time } = Uniforms;\n        try {\n          CSS.registerProperty({\n            name: '--' + uniform_time.name,\n            syntax: '<number>',\n            initialValue: 0,\n            inherits: true\n          });\n        } catch (e) {}\n        this.is_uniform_time_registered = true;\n      }\n    }\n\n    export({ scale, name, download, detail } = {}) {\n      return new Promise((resolve, reject) => {\n        let variables = get_all_variables(this);\n        let html = this.doodle.innerHTML;\n\n        let { width, height } = this.getBoundingClientRect();\n        scale = parseInt(scale) || 1;\n\n        let w = width * scale;\n        let h = height * scale;\n\n        let svg = `\n          <svg xmlns=\"http://www.w3.org/2000/svg\"\n            preserveAspectRatio=\"none\"\n            viewBox=\"0 0 ${ width } ${ height }\"\n            ${ is_safari() ? '' : `width=\"${ w }px\" height=\"${ h }px\"` }\n          >\n            <foreignObject width=\"100%\" height=\"100%\">\n              <div\n                class=\"host\"\n                xmlns=\"http://www.w3.org/1999/xhtml\"\n                style=\"width: ${ width }px; height: ${ height }px; \"\n              >\n                <style>.host { ${entity(variables)} }</style>\n                ${ html }\n              </div>\n            </foreignObject>\n          </svg>\n        `;\n\n        if (download || detail) {\n          svg_to_png(svg, w, h, scale)\n            .then(({ source, url, blob }) => {\n              resolve({\n                width: w, height: h, svg, blob, source\n              });\n              if (download) {\n                let a = document.createElement('a');\n                a.download = normalize_png_name(name);\n                a.href = url;\n                a.click();\n              }\n            })\n            .catch(error => {\n              reject(error);\n            });\n        } else {\n          resolve({\n            width: w, height: h, svg: svg\n          });\n        }\n      });\n    }\n\n    set_content(selector, styles) {\n      if (styles instanceof Promise) {\n        styles.then(value => {\n          this.set_content(selector, value);\n        });\n      } else {\n        const el = this.shadowRoot.querySelector(selector);\n        el && (el.styleSheet\n          ? (el.styleSheet.cssText = styles )\n          : (el.innerHTML = styles));\n      }\n    }\n  }\n  if (!customElements.get('css-doodle')) {\n    customElements.define('css-doodle', Doodle);\n  }\n}\n\nfunction get_basic_styles() {\n  let { uniform_time } = Uniforms;\n  const inherited_grid_props = get_props(/grid/)\n    .map(n => `${ n }: inherit;`)\n    .join('');\n  return `\n    *, *::after, *::before {\n      box-sizing: border-box;\n      animation-play-state: var(--cssd-animation-play-state) !important\n    }\n    :host, .host {\n      display: block;\n      visibility: visible;\n      width: auto;\n      height: auto;\n      --${ uniform_time.name }: 0\n    }\n    :host([hidden]), .host[hidden] {\n      display: none\n    }\n    .container {\n      position: relative;\n      width: 100%;\n      height: 100%;\n      display: grid;\n      ${ inherited_grid_props }\n    }\n    cell {\n      position: relative;\n      display: grid;\n      place-items: center\n    }\n    svg {\n      position: absolute;\n      width: 100%;\n      height: 100%\n    }\n    :host([cssd-paused-animation]) {\n      --cssd-animation-play-state: paused;\n      animation-play-state: paused !important\n    }\n  `;\n}\n\nfunction get_grid_styles(grid_obj) {\n  let { x, y } = grid_obj || {};\n  return `\n    :host, .host {\n      grid-template-rows: repeat(${ y }, 1fr);\n      grid-template-columns: repeat(${ x }, 1fr);\n    }\n  `;\n}\n\nfunction get_content(input) {\n  return is_nil(input) ? '' : input;\n}\n\nfunction create_cell(x, y, z, content, child = '') {\n  let id = cell_id(x, y, z);\n  let head = get_content(content['#' + id]);\n  let tail = get_content(child);\n  return `<cell id=\"${id}\">${head}${tail}</cell>`;\n}\n\nfunction create_grid(grid_obj, content) {\n  let { x, y, z } = grid_obj || {};\n  let result = '';\n  if (z == 1) {\n    for (let j = 1; j <= y; ++j) {\n      for (let i = 1; i <= x; ++i) {\n        result += create_cell(i, j, 1, content);\n      }\n    }\n  }\n  else {\n    let child = '';\n    for (let i = z; i >= 1; i--) {\n      let cell = create_cell(1, 1, i, content, child);\n      child = cell;\n    }\n    result = child;\n  }\n  return `<grid class=\"container\">${result}</grid>`;\n}\n\nexport default make_tag_function(rules => {\n  if (typeof document !== 'undefined') {\n    let doodle = document.createElement('css-doodle');\n    if (doodle.update) {\n      doodle.update(rules);\n    }\n    return doodle;\n  }\n});\n"],
  "mappings": "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AAI;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAE;AAAA,MAAI;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAG;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAI;AAAA,MACrE;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MAAG;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MAAE;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MACvE;AAAA,MAAE;AAAA,MAAI;AAAA,MAAG;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MAAG;AAAA,MAAI;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAI;AAAA,MAAG;AAAA,MACzE;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MAAE;AAAA,MAAG;AAAA,MAAI;AAAA,MAAI;AAAA,MAAG;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MAAG;AAAA,MAAI;AAAA,MACvE;AAAA,MAAI;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAI;AAAA,MAAG;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MAAG;AAAA,MACtE;AAAA,MAAI;AAAA,MAAG;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MAAG;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,MAAI;AAAA,MAAI;AAAA,MAAG;A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",
  "names": ["lastToken", "next", "prev", "range", "get_value", "parse", "joinTokens", "walk", "last", "expand", "parse", "last", "make_array", "last", "is", "symbols", "iterator", "last", "raw", "parse", "Tokens", "parse", "joinToken", "last", "NS", "NSXLink", "generate", "parse", "units", "unit", "last", "_", "get_tokens", "last", "expand", "hash", "parse", "commands", "joinTokens", "parse", "unit", "scale", "unit", "parse", "_", "last", "expand", "transform", "from", "to", "scale", "commands", "is_special_selector", "prng", "seed", "t", "i", "j", "s", "make_array", "last", "value", "extra", "commands", "output", "_", "token", "coords", "seed", "width", "readStatement", "joinToken", "walk", "parse", "nextId", "generate", "width", "scale", "_", "parse", "width", "uniform_mousex", "uniform_mousey", "uniform_width", "uniform_height", "uniform_time", "scale"]
}
